{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75","program":"C:\\Users\\Android\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","rand","--edition=2018","C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"libc\"","--cfg","feature=\"rand_chacha\"","--cfg","feature=\"std\"","--cfg","feature=\"std_rng\"","-C","metadata=f67e17959ba37fdc","-C","extra-filename=-f67e17959ba37fdc","--out-dir","c:\\Users\\Android\\OneDrive - initcool\\Rust_learn\\foo\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Android\\OneDrive - initcool\\Rust_learn\\foo\\target\\rls\\debug\\deps","--extern","rand_chacha=c:\\Users\\Android\\OneDrive - initcool\\Rust_learn\\foo\\target\\rls\\debug\\deps\\librand_chacha-f0a921a7ad132db3.rmeta","--extern","rand_core=c:\\Users\\Android\\OneDrive - initcool\\Rust_learn\\foo\\target\\rls\\debug\\deps\\librand_core-e250b11b4d9cce07.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Android\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Android\\OneDrive - initcool\\Rust_learn\\foo\\target\\rls\\debug\\deps\\librand-f67e17959ba37fdc.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[3420514013543292277,9739416008273741239]},"crate_root":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src","external_crates":[{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[5532051063976025760,2256364509988431667]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[7281929168992546274,2424678954744988439]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[353429176083156877,8877241423562725442]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":4,"id":{"name":"std","disambiguator":[3270634090130538391,14263718429753122316]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12196241746694410349,3365331946273478086]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[13433537899495627439,16859208643582984883]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8262757423788146228,17823423584984973278]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15770910386717746279,2673050061768012116]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15973938195753786773,1947565178479551552]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1495831041033125177,733230368880816191]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17679945988426249108,16004284943229030185]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[4674106540844190265,14311593861468432536]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[12112277384381649788,786361786206656603]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":14,"id":{"name":"rand_core","disambiguator":[11168385419066493773,16396316547526837556]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":15,"id":{"name":"getrandom","disambiguator":[13155612238082272708,7143027451259897809]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[14002630626307095317,15618755111291099765]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","num":17,"id":{"name":"rand_chacha","disambiguator":[15027260334265994569,5487335121823270264]}},{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","num":18,"id":{"name":"ppv_lite86","disambiguator":[8666118574159300734,9723602165078258917]}}],"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":408,"byte_end":6712,"line_start":10,"line_end":215,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":193},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2860,"byte_end":2869,"line_start":95,"line_end":95,"column_start":21,"column_end":30},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":109},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2871,"byte_end":2876,"line_start":95,"line_end":95,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":188},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2878,"byte_end":2885,"line_start":95,"line_end":95,"column_start":39,"column_end":46},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":14,"index":194},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2887,"byte_end":2898,"line_start":95,"line_end":95,"column_start":48,"column_end":59},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11306,"byte_end":11315,"line_start":108,"line_end":108,"column_start":27,"column_end":36},"alias_span":null,"name":"IntoFloat","value":"","parent":{"krate":0,"index":328}},{"kind":"Use","ref_id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161486,"byte_end":161499,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":462}},{"kind":"Use","ref_id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161501,"byte_end":161514,"line_start":14,"line_end":14,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":462}},{"kind":"Use","ref_id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11594,"byte_end":11603,"line_start":119,"line_end":119,"column_start":27,"column_end":36},"alias_span":null,"name":"Bernoulli","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11605,"byte_end":11619,"line_start":119,"line_end":119,"column_start":38,"column_end":52},"alias_span":null,"name":"BernoulliError","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11651,"byte_end":11663,"line_start":120,"line_end":120,"column_start":30,"column_end":42},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11665,"byte_end":11673,"line_start":120,"line_end":120,"column_start":44,"column_end":52},"alias_span":null,"name":"DistIter","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11675,"byte_end":11682,"line_start":120,"line_end":120,"column_start":54,"column_end":61},"alias_span":null,"name":"DistMap","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11739,"byte_end":11749,"line_start":122,"line_end":122,"column_start":29,"column_end":39},"alias_span":null,"name":"DistString","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11773,"byte_end":11779,"line_start":123,"line_end":123,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1162},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11773,"byte_end":11779,"line_start":123,"line_end":123,"column_start":23,"column_end":29},"alias_span":null,"name":"Open01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1154},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11781,"byte_end":11793,"line_start":123,"line_end":123,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1155},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11781,"byte_end":11793,"line_start":123,"line_end":123,"column_start":31,"column_end":43},"alias_span":null,"name":"OpenClosed01","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11817,"byte_end":11829,"line_start":124,"line_end":124,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1235},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11817,"byte_end":11829,"line_start":124,"line_end":124,"column_start":22,"column_end":34},"alias_span":null,"name":"Alphanumeric","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1553},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11852,"byte_end":11857,"line_start":125,"line_end":125,"column_start":22,"column_end":27},"alias_span":null,"name":"Slice","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11897,"byte_end":11904,"line_start":127,"line_end":127,"column_start":24,"column_end":31},"alias_span":null,"name":"Uniform","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11963,"byte_end":11976,"line_start":129,"line_end":129,"column_start":32,"column_end":45},"alias_span":null,"name":"WeightedError","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11978,"byte_end":11991,"line_start":129,"line_end":129,"column_start":47,"column_end":60},"alias_span":null,"name":"WeightedIndex","value":"","parent":{"krate":0,"index":24}},{"kind":"Use","ref_id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163255,"byte_end":163267,"line_start":21,"line_end":21,"column_start":49,"column_end":61},"alias_span":null,"name":"Distribution","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163415,"byte_end":163421,"line_start":26,"line_end":26,"column_start":40,"column_end":46},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163512,"byte_end":163521,"line_start":29,"line_end":29,"column_start":22,"column_end":31},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163562,"byte_end":163576,"line_start":30,"line_end":30,"column_start":40,"column_end":54},"alias_span":null,"name":"IteratorRandom","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":989},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163578,"byte_end":163589,"line_start":30,"line_end":30,"column_start":56,"column_end":67},"alias_span":null,"name":"SliceRandom","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163676,"byte_end":163682,"line_start":33,"line_end":33,"column_start":17,"column_end":23},"alias_span":null,"name":"random","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163684,"byte_end":163694,"line_start":33,"line_end":33,"column_start":25,"column_end":35},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":14,"index":193},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163731,"byte_end":163740,"line_start":34,"line_end":34,"column_start":35,"column_end":44},"alias_span":null,"name":"CryptoRng","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163742,"byte_end":163745,"line_start":34,"line_end":34,"column_start":46,"column_end":49},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":14,"index":188},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163747,"byte_end":163754,"line_start":34,"line_end":34,"column_start":51,"column_end":58},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":14,"index":194},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163756,"byte_end":163767,"line_start":34,"line_end":34,"column_start":60,"column_end":71},"alias_span":null,"name":"SeedableRng","value":"","parent":{"krate":0,"index":531}},{"kind":"Use","ref_id":{"krate":0,"index":2308},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\mod.rs","byte_start":189150,"byte_end":189159,"line_start":15,"line_end":15,"column_start":22,"column_end":31},"alias_span":null,"name":"ReadError","value":"","parent":{"krate":0,"index":634}},{"kind":"Use","ref_id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\mod.rs","byte_start":189161,"byte_end":189168,"line_start":15,"line_end":15,"column_start":33,"column_end":40},"alias_span":null,"name":"ReadRng","value":"","parent":{"krate":0,"index":634}},{"kind":"Use","ref_id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\mod.rs","byte_start":189196,"byte_end":189208,"line_start":16,"line_end":16,"column_start":26,"column_end":38},"alias_span":null,"name":"ReseedingRng","value":"","parent":{"krate":0,"index":634}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":188485,"byte_end":188491,"line_start":115,"line_end":115,"column_start":48,"column_end":54},"alias_span":null,"name":"StdRng","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":188565,"byte_end":188574,"line_start":116,"line_end":116,"column_start":73,"column_end":82},"alias_span":null,"name":"ThreadRng","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":14,"index":252},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":188680,"byte_end":188685,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":14,"index":253},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":188680,"byte_end":188685,"line_start":119,"line_end":119,"column_start":50,"column_end":55},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3094,"byte_end":3104,"line_start":106,"line_end":106,"column_start":30,"column_end":40},"alias_span":null,"name":"thread_rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3120,"byte_end":3124,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"alias_span":null,"name":"Fill","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3126,"byte_end":3129,"line_start":107,"line_end":107,"column_start":21,"column_end":24},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":408,"byte_end":6712,"line_start":10,"line_end":215,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":531},{"krate":0,"index":568},{"krate":0,"index":633},{"krate":0,"index":848},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1105}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":408,"byte_end":450,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":451,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Rand provides utilities to generate random numbers, to convert them to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":455,"byte_end":529,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ useful types and distributions, and some randomness-related algorithms.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":530,"byte_end":605,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":606,"byte_end":609,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Quick Start","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":610,"byte_end":627,"line_start":15,"line_end":15,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":628,"byte_end":631,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ To get you started quickly, the easiest and highest-level way to get","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":632,"byte_end":704,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ a random value is to use [`random()`]; alternatively you can use","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":705,"byte_end":773,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/ [`thread_rng()`]. The [`Rng`] trait provides a useful API on all RNGs, while","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":774,"byte_end":854,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ the [`distributions`] and [`seq`] modules provide further","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":855,"byte_end":916,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/ functionality on top of RNGs.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":917,"byte_end":950,"line_start":21,"line_end":21,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":951,"byte_end":954,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":955,"byte_end":962,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":963,"byte_end":988,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":989,"byte_end":992,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":993,"byte_end":1039,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     // Try printing a random unicode code point (probably a bad idea)!","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1040,"byte_end":1114,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/     println!(\"char: {}\", rand::random::<char>());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1115,"byte_end":1168,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1169,"byte_end":1174,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1175,"byte_end":1178,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1179,"byte_end":1216,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/ let y: f64 = rng.gen(); // generates a float between 0 and 1","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1217,"byte_end":1281,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1282,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let mut nums: Vec<i32> = (1..100).collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1286,"byte_end":1334,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ nums.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1335,"byte_end":1362,"line_start":35,"line_end":35,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1363,"byte_end":1370,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1371,"byte_end":1374,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # The Book","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1375,"byte_end":1389,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1390,"byte_end":1393,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For the user guide and further documentation, please read","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1394,"byte_end":1455,"line_start":40,"line_end":40,"column_start":1,"column_end":62}},{"value":"/ [The Rust Rand Book](https://rust-random.github.io/book).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1456,"byte_end":1517,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1733,"byte_end":1755,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1756,"byte_end":1795,"line_start":49,"line_end":49,"column_start":1,"column_end":40}},{"value":"no_std","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":1857,"byte_end":1867,"line_start":51,"line_end":51,"column_start":1,"column_end":11}},{"value":"allow(clippy :: float_cmp, clippy :: neg_cmp_op_on_partial_ord,)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2034,"byte_end":2108,"line_start":55,"line_end":58,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":50},{"krate":0,"index":98},{"krate":0,"index":119},{"krate":0,"index":169},{"krate":0,"index":226},{"krate":0,"index":246},{"krate":0,"index":283},{"krate":0,"index":328},{"krate":0,"index":332},{"krate":0,"index":462},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":489},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":2017},{"krate":0,"index":2019},{"krate":0,"index":2021},{"krate":0,"index":2022}],"decl_id":null,"docs":" Generating random samples from probability distributions","sig":null,"attributes":[{"value":"/ Generating random samples from probability distributions","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7122,"byte_end":7182,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7183,"byte_end":7186,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is the home of the [`Distribution`] trait and several of its","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7187,"byte_end":7263,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ implementations. It is the workhorse behind some of the convenient","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7264,"byte_end":7334,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/ functionality of the [`Rng`] trait, e.g. [`Rng::gen`] and of course","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7335,"byte_end":7406,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ [`Rng::sample`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7407,"byte_end":7427,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7428,"byte_end":7431,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Abstractly, a [probability distribution] describes the probability of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7432,"byte_end":7505,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ occurrence of each value in its sample space.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7506,"byte_end":7555,"line_start":18,"line_end":18,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7556,"byte_end":7559,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ More concretely, an implementation of `Distribution<T>` for type `X` is an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7560,"byte_end":7638,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ algorithm for choosing values from the sample space (a subset of `T`)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7639,"byte_end":7712,"line_start":21,"line_end":21,"column_start":1,"column_end":74}},{"value":"/ according to the distribution `X` represents, using an external source of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7713,"byte_end":7790,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ randomness (an RNG supplied to the `sample` function).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7791,"byte_end":7849,"line_start":23,"line_end":23,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7850,"byte_end":7853,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ A type `X` may implement `Distribution<T>` for multiple types `T`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7854,"byte_end":7924,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/ Any type implementing [`Distribution`] is stateless (i.e. immutable),","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7925,"byte_end":7998,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ but it may have internal parameters set at construction time (for example,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":7999,"byte_end":8077,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [`Uniform`] allows specification of its sample space as a range within `T`).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8078,"byte_end":8158,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8159,"byte_end":8162,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8163,"byte_end":8166,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # The `Standard` distribution","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8167,"byte_end":8200,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8201,"byte_end":8204,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution is important to mention. This is the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8205,"byte_end":8275,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ distribution used by [`Rng::gen`] and represents the \"default\" way to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8276,"byte_end":8349,"line_start":34,"line_end":34,"column_start":1,"column_end":74}},{"value":"/ produce a random value for many different types, including most primitive","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8350,"byte_end":8427,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ types, tuples, arrays, and a few derived types. See the documentation of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8428,"byte_end":8504,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ [`Standard`] for more details.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8505,"byte_end":8539,"line_start":37,"line_end":37,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8540,"byte_end":8543,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Implementing `Distribution<T>` for [`Standard`] for user types `T` makes it","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8544,"byte_end":8623,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ possible to generate type `T` with [`Rng::gen`], and by extension also","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8624,"byte_end":8698,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ with the [`random`] function.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8699,"byte_end":8732,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8733,"byte_end":8736,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Random characters","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8737,"byte_end":8761,"line_start":43,"line_end":43,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8762,"byte_end":8765,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ [`Alphanumeric`] is a simple distribution to sample random letters and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8766,"byte_end":8840,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ numbers of the `char` type; in contrast [`Standard`] may sample any valid","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8841,"byte_end":8918,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ `char`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8919,"byte_end":8930,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8931,"byte_end":8934,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8935,"byte_end":8938,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ # Uniform numeric ranges","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8939,"byte_end":8967,"line_start":50,"line_end":50,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8968,"byte_end":8971,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The [`Uniform`] distribution is more flexible than [`Standard`], but also","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":8972,"byte_end":9049,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/ more specialised: it supports fewer target types, but allows the sample","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9050,"byte_end":9125,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"/ space to be specified as an arbitrary range within its target type `T`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9126,"byte_end":9201,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/ Both [`Standard`] and [`Uniform`] are in some sense uniform distributions.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9202,"byte_end":9280,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9281,"byte_end":9284,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ Values may be sampled from this distribution using [`Rng::sample(Range)`] or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9285,"byte_end":9365,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/ by creating a distribution object with [`Uniform::new`],","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9366,"byte_end":9426,"line_start":58,"line_end":58,"column_start":1,"column_end":61}},{"value":"/ [`Uniform::new_inclusive`] or `From<Range>`. When the range limits are not","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9427,"byte_end":9505,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ known at compile time it is typically faster to reuse an existing","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9506,"byte_end":9575,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ `Uniform` object than to call [`Rng::sample(Range)`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9576,"byte_end":9633,"line_start":61,"line_end":61,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9634,"byte_end":9637,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ User types `T` may also implement `Distribution<T>` for [`Uniform`],","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9638,"byte_end":9710,"line_start":63,"line_end":63,"column_start":1,"column_end":73}},{"value":"/ although this is less straightforward than for [`Standard`] (see the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9711,"byte_end":9783,"line_start":64,"line_end":64,"column_start":1,"column_end":73}},{"value":"/ documentation in the [`uniform`] module). Doing so enables generation of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9784,"byte_end":9860,"line_start":65,"line_end":65,"column_start":1,"column_end":77}},{"value":"/ values of type `T` with  [`Rng::sample(Range)`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9861,"byte_end":9913,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9914,"byte_end":9917,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ## Open and half-open ranges","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9918,"byte_end":9950,"line_start":68,"line_end":68,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9951,"byte_end":9954,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ There are surprisingly many ways to uniformly generate random floats. A","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":9955,"byte_end":10030,"line_start":70,"line_end":70,"column_start":1,"column_end":76}},{"value":"/ range between 0 and 1 is standard, but the exact bounds (open vs closed)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10031,"byte_end":10107,"line_start":71,"line_end":71,"column_start":1,"column_end":77}},{"value":"/ and accuracy differ. In addition to the [`Standard`] distribution Rand offers","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10108,"byte_end":10189,"line_start":72,"line_end":72,"column_start":1,"column_end":82}},{"value":"/ [`Open01`] and [`OpenClosed01`]. See \"Floating point implementation\" section of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10190,"byte_end":10273,"line_start":73,"line_end":73,"column_start":1,"column_end":84}},{"value":"/ [`Standard`] documentation for more details.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10274,"byte_end":10322,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10323,"byte_end":10326,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # Non-uniform sampling","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10327,"byte_end":10353,"line_start":76,"line_end":76,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10354,"byte_end":10357,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Sampling a simple true/false outcome with a given probability has a name:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10358,"byte_end":10435,"line_start":78,"line_end":78,"column_start":1,"column_end":78}},{"value":"/ the [`Bernoulli`] distribution (this is used by [`Rng::gen_bool`]).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10436,"byte_end":10507,"line_start":79,"line_end":79,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10508,"byte_end":10511,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ For weighted sampling from a sequence of discrete values, use the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10512,"byte_end":10581,"line_start":81,"line_end":81,"column_start":1,"column_end":70}},{"value":"/ [`WeightedIndex`] distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10582,"byte_end":10617,"line_start":82,"line_end":82,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10618,"byte_end":10621,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This crate no longer includes other non-uniform distributions; instead","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10622,"byte_end":10696,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ it is recommended that you use either [`rand_distr`] or [`statrs`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10697,"byte_end":10768,"line_start":85,"line_end":85,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10769,"byte_end":10772,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10773,"byte_end":10776,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ [probability distribution]: https://en.wikipedia.org/wiki/Probability_distribution","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10777,"byte_end":10863,"line_start":88,"line_end":88,"column_start":1,"column_end":87}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10864,"byte_end":10919,"line_start":89,"line_end":89,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10920,"byte_end":10967,"line_start":90,"line_end":90,"column_start":1,"column_end":48}},{"value":"/ [`random`]: crate::random","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10969,"byte_end":10998,"line_start":92,"line_end":92,"column_start":1,"column_end":30}},{"value":"/ [`rand_distr`]: https://crates.io/crates/rand_distr","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":10999,"byte_end":11054,"line_start":93,"line_end":93,"column_start":1,"column_end":56}},{"value":"/ [`statrs`]: https://crates.io/crates/statrs","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11055,"byte_end":11102,"line_start":94,"line_end":94,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1107},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16945,"byte_end":16954,"line_start":38,"line_end":38,"column_start":12,"column_end":21},"name":"Bernoulli","qualname":"::distributions::bernoulli::Bernoulli","value":"Bernoulli {  }","parent":null,"children":[{"krate":0,"index":1108}],"decl_id":null,"docs":" The Bernoulli distribution.","sig":null,"attributes":[{"value":"/ The Bernoulli distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16303,"byte_end":16334,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16335,"byte_end":16338,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is a special case of the Binomial distribution where `n = 1`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16339,"byte_end":16409,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16410,"byte_end":16413,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16414,"byte_end":16427,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16428,"byte_end":16431,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16432,"byte_end":16443,"line_start":23,"line_end":23,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Bernoulli, Distribution};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16444,"byte_end":16499,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16500,"byte_end":16503,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let d = Bernoulli::new(0.3).unwrap();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16504,"byte_end":16545,"line_start":26,"line_end":26,"column_start":1,"column_end":42}},{"value":"/ let v = d.sample(&mut rand::thread_rng());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16546,"byte_end":16592,"line_start":27,"line_end":27,"column_start":1,"column_end":47}},{"value":"/ println!(\"{} is from a Bernoulli distribution\", v);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16593,"byte_end":16648,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16649,"byte_end":16656,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16657,"byte_end":16660,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16661,"byte_end":16676,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16677,"byte_end":16680,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This `Bernoulli` distribution uses 64 bits from the RNG (a `u64`),","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16681,"byte_end":16751,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ so only probabilities that are multiples of 2<sup>-64</sup> can be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16752,"byte_end":16822,"line_start":34,"line_end":34,"column_start":1,"column_end":71}},{"value":"/ represented.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":16823,"byte_end":16839,"line_start":35,"line_end":35,"column_start":1,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1115},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18420,"byte_end":18438,"line_start":72,"line_end":72,"column_start":5,"column_end":23},"name":"InvalidProbability","qualname":"::distributions::bernoulli::BernoulliError::InvalidProbability","value":"BernoulliError::InvalidProbability","parent":{"krate":0,"index":1114},"children":[],"decl_id":null,"docs":" `p < 0` or `p > 1`.\n","sig":null,"attributes":[{"value":"/ `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18392,"byte_end":18415,"line_start":71,"line_end":71,"column_start":5,"column_end":28}}]},{"kind":"Enum","id":{"krate":0,"index":1114},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18371,"byte_end":18385,"line_start":70,"line_end":70,"column_start":10,"column_end":24},"name":"BernoulliError","qualname":"::distributions::bernoulli::BernoulliError","value":"pub enum BernoulliError { InvalidProbability, }","parent":null,"children":[{"krate":0,"index":1115}],"decl_id":null,"docs":" Error type returned from `Bernoulli::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `Bernoulli::new`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18270,"byte_end":18316,"line_start":68,"line_end":68,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19309,"byte_end":19312,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Bernoulli>::new","value":"pub fn new(f64) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the given probability of success `p`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the given probability of success `p`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18790,"byte_end":18864,"line_start":87,"line_end":87,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18869,"byte_end":18872,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Precision","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18877,"byte_end":18892,"line_start":89,"line_end":89,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18897,"byte_end":18900,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ For `p = 1.0`, the resulting distribution will always generate true.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18905,"byte_end":18977,"line_start":91,"line_end":91,"column_start":5,"column_end":77}},{"value":"/ For `p = 0.0`, the resulting distribution will always generate false.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18982,"byte_end":19055,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19060,"byte_end":19063,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ This method is accurate for any input `p` in the range `[0, 1]` which is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19068,"byte_end":19144,"line_start":94,"line_end":94,"column_start":5,"column_end":81}},{"value":"/ a multiple of 2<sup>-64</sup>. (Note that not all multiples of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19149,"byte_end":19215,"line_start":95,"line_end":95,"column_start":5,"column_end":71}},{"value":"/ 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19220,"byte_end":19283,"line_start":96,"line_end":96,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19288,"byte_end":19297,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":20195,"byte_end":20205,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"from_ratio","qualname":"<Bernoulli>::from_ratio","value":"pub fn from_ratio(u32, u32) -> Result<Bernoulli, BernoulliError>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Bernoulli` with the probability of success of\n `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","sig":null,"attributes":[{"value":"/ Construct a new `Bernoulli` with the probability of success of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19653,"byte_end":19719,"line_start":110,"line_end":110,"column_start":5,"column_end":71}},{"value":"/ `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19724,"byte_end":19792,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19797,"byte_end":19871,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19876,"byte_end":19879,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ return `true`. If `numerator == 0` it will always return `false`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19884,"byte_end":19953,"line_start":114,"line_end":114,"column_start":5,"column_end":74}},{"value":"/ For `numerator > denominator` and `denominator == 0`, this returns an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":19958,"byte_end":20031,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ error. Otherwise, for `numerator == denominator`, samples are always","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":20036,"byte_end":20108,"line_start":116,"line_end":116,"column_start":5,"column_end":77}},{"value":"/ true; for `numerator == 0` samples are always false.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":20113,"byte_end":20169,"line_start":117,"line_end":117,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":20174,"byte_end":20183,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24743,"byte_end":24755,"line_start":35,"line_end":35,"column_start":11,"column_end":23},"name":"Distribution","qualname":"::distributions::distribution::Distribution","value":"Distribution<T>","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"decl_id":null,"docs":" Types (distributions) that can be used to create a random instance of `T`.","sig":null,"attributes":[{"value":"/ Types (distributions) that can be used to create a random instance of `T`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":23729,"byte_end":23807,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":23808,"byte_end":23811,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ It is possible to sample from a distribution through both the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":23812,"byte_end":23877,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/ `Distribution` and [`Rng`] traits, via `distr.sample(&mut rng)` and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":23878,"byte_end":23949,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ `rng.sample(distr)`. They also both offer the [`sample_iter`] method, which","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":23950,"byte_end":24029,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ produces an iterator that samples from the distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24030,"byte_end":24090,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24091,"byte_end":24094,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ All implementations are expected to be immutable; this has the significant","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24095,"byte_end":24173,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ advantage of not needing to consider thread safety, and for most","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24174,"byte_end":24242,"line_start":25,"line_end":25,"column_start":1,"column_end":69}},{"value":"/ distributions efficient state-less sampling algorithms are available.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24243,"byte_end":24316,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24317,"byte_end":24320,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Implementations are typically expected to be portable with reproducible","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24321,"byte_end":24396,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ results when used with a PRNG with fixed seed; see the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24397,"byte_end":24455,"line_start":29,"line_end":29,"column_start":1,"column_end":59}},{"value":"/ [portability chapter](https://rust-random.github.io/book/portability.html)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24456,"byte_end":24534,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ of The Rust Rand Book. In some cases this does not apply, e.g. the `usize`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24535,"byte_end":24613,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ type requires different sampling on 32-bit and 64-bit machines.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24614,"byte_end":24681,"line_start":32,"line_end":32,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24682,"byte_end":24685,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24686,"byte_end":24732,"line_start":34,"line_end":34,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24849,"byte_end":24855,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::distribution::Distribution::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> T","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Generate a random value of `T`, using `rng` as the source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `T`, using `rng` as the source of randomness.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24765,"byte_end":24841,"line_start":36,"line_end":36,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26149,"byte_end":26160,"line_start":73,"line_end":73,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::distributions::distribution::Distribution::sample_iter","value":"pub fn sample_iter<R>(Self, R) -> DistIter<Self, R, T> where R: Rng,\nSelf: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Create an iterator that generates random values of `T`, using `rng` as\n the source of randomness.","sig":null,"attributes":[{"value":"/ Create an iterator that generates random values of `T`, using `rng` as","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24904,"byte_end":24978,"line_start":39,"line_end":39,"column_start":5,"column_end":79}},{"value":"/ the source of randomness.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":24983,"byte_end":25012,"line_start":40,"line_end":40,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25017,"byte_end":25020,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes `self` by value. This works since","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25025,"byte_end":25092,"line_start":42,"line_end":42,"column_start":5,"column_end":72}},{"value":"/ `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25097,"byte_end":25165,"line_start":43,"line_end":43,"column_start":5,"column_end":73}},{"value":"/ however borrowing is not automatic hence `distr.sample_iter(...)` may","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25170,"byte_end":25243,"line_start":44,"line_end":44,"column_start":5,"column_end":78}},{"value":"/ need to be replaced with `(&distr).sample_iter(...)` to borrow or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25248,"byte_end":25317,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/ `(&*distr).sample_iter(...)` to reborrow an existing reference.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25322,"byte_end":25389,"line_start":46,"line_end":46,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25394,"byte_end":25397,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25402,"byte_end":25415,"line_start":48,"line_end":48,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25420,"byte_end":25423,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25428,"byte_end":25435,"line_start":50,"line_end":50,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25440,"byte_end":25465,"line_start":51,"line_end":51,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25470,"byte_end":25547,"line_start":52,"line_end":52,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25552,"byte_end":25555,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25560,"byte_end":25591,"line_start":54,"line_end":54,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25596,"byte_end":25599,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25604,"byte_end":25627,"line_start":56,"line_end":56,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = Standard.sample_iter(&mut rng).take(16).collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25632,"byte_end":25704,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25709,"byte_end":25712,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25717,"byte_end":25731,"line_start":59,"line_end":59,"column_start":5,"column_end":19}},{"value":"/ let s: String = Alphanumeric","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25736,"byte_end":25768,"line_start":60,"line_end":60,"column_start":5,"column_end":37}},{"value":"/     .sample_iter(&mut rng)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25773,"byte_end":25803,"line_start":61,"line_end":61,"column_start":5,"column_end":35}},{"value":"/     .take(7)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25808,"byte_end":25824,"line_start":62,"line_end":62,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25829,"byte_end":25853,"line_start":63,"line_end":63,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25858,"byte_end":25877,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25882,"byte_end":25885,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25890,"byte_end":25910,"line_start":66,"line_end":66,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25915,"byte_end":25964,"line_start":67,"line_end":67,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = die_range.sample_iter(&mut rng);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":25969,"byte_end":26024,"line_start":68,"line_end":68,"column_start":5,"column_end":60}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26029,"byte_end":26070,"line_start":69,"line_end":69,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26075,"byte_end":26119,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26124,"byte_end":26129,"line_start":71,"line_end":71,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26134,"byte_end":26141,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26909,"byte_end":26912,"line_start":102,"line_end":102,"column_start":8,"column_end":11},"name":"map","qualname":"::distributions::distribution::Distribution::map","value":"pub fn map<F, S>(Self, F) -> DistMap<Self, F, T, S> where F: Fn(T) -> S,\nSelf: Sized","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Create a distribution of values of 'S' by mapping the output of `Self`\n through the closure `F`","sig":null,"attributes":[{"value":"/ Create a distribution of values of 'S' by mapping the output of `Self`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26387,"byte_end":26461,"line_start":85,"line_end":85,"column_start":5,"column_end":79}},{"value":"/ through the closure `F`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26466,"byte_end":26493,"line_start":86,"line_end":86,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26498,"byte_end":26501,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26506,"byte_end":26519,"line_start":88,"line_end":88,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26524,"byte_end":26527,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26532,"byte_end":26539,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26544,"byte_end":26569,"line_start":91,"line_end":91,"column_start":5,"column_end":30}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26574,"byte_end":26627,"line_start":92,"line_end":92,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26632,"byte_end":26635,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26640,"byte_end":26671,"line_start":94,"line_end":94,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26676,"byte_end":26679,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let die = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26684,"byte_end":26727,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/ let even_number = die.map(|num| num % 2 == 0);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26732,"byte_end":26782,"line_start":97,"line_end":97,"column_start":5,"column_end":55}},{"value":"/ while !even_number.sample(&mut rng) {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26787,"byte_end":26828,"line_start":98,"line_end":98,"column_start":5,"column_end":46}},{"value":"/     println!(\"Still odd; rolling again!\");","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26833,"byte_end":26879,"line_start":99,"line_end":99,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26884,"byte_end":26889,"line_start":100,"line_end":100,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":26894,"byte_end":26901,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1128},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27622,"byte_end":27630,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"DistIter","qualname":"::distributions::distribution::DistIter","value":"DistIter {  }","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1134}],"decl_id":null,"docs":" An iterator that generates random values of `T` with distribution `D`,\n using `R` as the source of randomness.","sig":null,"attributes":[{"value":"/ An iterator that generates random values of `T` with distribution `D`,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27305,"byte_end":27379,"line_start":121,"line_end":121,"column_start":1,"column_end":75}},{"value":"/ using `R` as the source of randomness.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27380,"byte_end":27422,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27423,"byte_end":27426,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`sample_iter`] method on [`Distribution`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27427,"byte_end":27506,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27507,"byte_end":27542,"line_start":125,"line_end":125,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27543,"byte_end":27546,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ [`sample_iter`]: Distribution::sample_iter","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27547,"byte_end":27593,"line_start":127,"line_end":127,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1140},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28785,"byte_end":28792,"line_start":176,"line_end":176,"column_start":12,"column_end":19},"name":"DistMap","qualname":"::distributions::distribution::DistMap","value":"DistMap {  }","parent":null,"children":[{"krate":0,"index":1145},{"krate":0,"index":1146},{"krate":0,"index":1147}],"decl_id":null,"docs":" A distribution of values of type `S` derived from the distribution `D`\n by mapping its output of type `T` through the closure `F`.","sig":null,"attributes":[{"value":"/ A distribution of values of type `S` derived from the distribution `D`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28513,"byte_end":28587,"line_start":170,"line_end":170,"column_start":1,"column_end":75}},{"value":"/ by mapping its output of type `T` through the closure `F`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28588,"byte_end":28650,"line_start":171,"line_end":171,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28651,"byte_end":28654,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`Distribution::map`] method.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28655,"byte_end":28720,"line_start":173,"line_end":173,"column_start":1,"column_end":66}},{"value":"/ See its documentation for more.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28721,"byte_end":28756,"line_start":174,"line_end":174,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29311,"byte_end":29321,"line_start":197,"line_end":197,"column_start":11,"column_end":21},"name":"DistString","qualname":"::distributions::distribution::DistString","value":"DistString","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":96}],"decl_id":null,"docs":" `String` sampler","sig":null,"attributes":[{"value":"/ `String` sampler","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29110,"byte_end":29130,"line_start":192,"line_end":192,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29131,"byte_end":29134,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ Sampling a `String` of random characters is not quite the same as collecting","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29135,"byte_end":29215,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"/ a sequence of chars. This trait contains some helpers.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29216,"byte_end":29274,"line_start":195,"line_end":195,"column_start":1,"column_end":59}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29275,"byte_end":29300,"line_start":196,"line_end":196,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29377,"byte_end":29390,"line_start":199,"line_end":199,"column_start":8,"column_end":21},"name":"append_string","qualname":"::distributions::distribution::DistString::append_string","value":"pub fn append_string<R: Rng + ?Sized>(&Self, &mut R, &mut String, usize)","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Append `len` random chars to `string`\n","sig":null,"attributes":[{"value":"/ Append `len` random chars to `string`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29328,"byte_end":29369,"line_start":198,"line_end":198,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29534,"byte_end":29547,"line_start":203,"line_end":203,"column_start":8,"column_end":21},"name":"sample_string","qualname":"::distributions::distribution::DistString::sample_string","value":"pub fn sample_string<R: Rng + ?Sized>(&Self, &mut R, usize) -> String","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Generate a `String` of `len` random chars\n","sig":null,"attributes":[{"value":"/ Generate a `String` of `len` random chars","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29467,"byte_end":29512,"line_start":201,"line_end":201,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":29517,"byte_end":29526,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1154},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33245,"byte_end":33257,"line_start":46,"line_end":46,"column_start":12,"column_end":24},"name":"OpenClosed01","qualname":"::distributions::float::OpenClosed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the half-open\n interval `(0, 1]`, i.e. including 1 but not 0.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the half-open","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32228,"byte_end":32306,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ interval `(0, 1]`, i.e. including 1 but not 0.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32307,"byte_end":32357,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32358,"byte_end":32361,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32362,"byte_end":32436,"line_start":23,"line_end":23,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32437,"byte_end":32514,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32515,"byte_end":32588,"line_start":25,"line_end":25,"column_start":1,"column_end":74}},{"value":"/ multiplicative method.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32589,"byte_end":32615,"line_start":26,"line_end":26,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32616,"byte_end":32619,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`Open01`]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32620,"byte_end":32686,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ which samples from `(0, 1)` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32687,"byte_end":32763,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32764,"byte_end":32775,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32776,"byte_end":32779,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32780,"byte_end":32793,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32794,"byte_end":32801,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32802,"byte_end":32834,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::OpenClosed01;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32835,"byte_end":32877,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32878,"byte_end":32881,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(OpenClosed01);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32882,"byte_end":32935,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32936,"byte_end":32977,"line_start":38,"line_end":38,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32978,"byte_end":32985,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32986,"byte_end":32989,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":32990,"byte_end":33038,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/ [`Open01`]: crate::distributions::Open01","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33039,"byte_end":33083,"line_start":42,"line_end":42,"column_start":1,"column_end":45}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33084,"byte_end":33139,"line_start":43,"line_end":43,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":1161},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34252,"byte_end":34258,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"Open01","qualname":"::distributions::float::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A distribution to sample floating point numbers uniformly in the open\n interval `(0, 1)`, i.e. not including either endpoint.","sig":null,"attributes":[{"value":"/ A distribution to sample floating point numbers uniformly in the open","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33260,"byte_end":33333,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ interval `(0, 1)`, i.e. not including either endpoint.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33334,"byte_end":33392,"line_start":49,"line_end":49,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33393,"byte_end":33396,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε + ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33397,"byte_end":33476,"line_start":51,"line_end":51,"column_start":1,"column_end":78}},{"value":"/ the 23 most significant random bits of an `u32` are used, for `f64` 52 from","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33477,"byte_end":33556,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"/ an `u64`. The conversion uses a transmute-based method.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33557,"byte_end":33616,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33617,"byte_end":33620,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ See also: [`Standard`] which samples from `[0, 1)`, [`OpenClosed01`]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33621,"byte_end":33693,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ which samples from `(0, 1]` and [`Uniform`] which samples from arbitrary","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33694,"byte_end":33770,"line_start":56,"line_end":56,"column_start":1,"column_end":77}},{"value":"/ ranges.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33771,"byte_end":33782,"line_start":57,"line_end":57,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33783,"byte_end":33786,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33787,"byte_end":33800,"line_start":59,"line_end":59,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33801,"byte_end":33808,"line_start":60,"line_end":60,"column_start":1,"column_end":8}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33809,"byte_end":33841,"line_start":61,"line_end":61,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Open01;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33842,"byte_end":33878,"line_start":62,"line_end":62,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33879,"byte_end":33882,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = thread_rng().sample(Open01);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33883,"byte_end":33930,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/ println!(\"f32 from (0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33931,"byte_end":33972,"line_start":65,"line_end":65,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33973,"byte_end":33980,"line_start":66,"line_end":66,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33981,"byte_end":33984,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":33985,"byte_end":34033,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ [`OpenClosed01`]: crate::distributions::OpenClosed01","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34034,"byte_end":34090,"line_start":69,"line_end":69,"column_start":1,"column_end":57}},{"value":"/ [`Uniform`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34091,"byte_end":34146,"line_start":70,"line_end":70,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34368,"byte_end":34377,"line_start":78,"line_end":78,"column_start":11,"column_end":20},"name":"IntoFloat","qualname":"::distributions::float::IntoFloat","value":"IntoFloat","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34389,"byte_end":34390,"line_start":79,"line_end":79,"column_start":10,"column_end":11},"name":"F","qualname":"::distributions::float::IntoFloat::F","value":"type F;","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34793,"byte_end":34817,"line_start":89,"line_end":89,"column_start":8,"column_end":32},"name":"into_float_with_exponent","qualname":"::distributions::float::IntoFloat::into_float_with_exponent","value":"pub fn into_float_with_exponent(Self, i32) -> Self::F","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Helper method to combine the fraction and a constant exponent into a\n float.","sig":null,"attributes":[{"value":"/ Helper method to combine the fraction and a constant exponent into a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34397,"byte_end":34469,"line_start":81,"line_end":81,"column_start":5,"column_end":77}},{"value":"/ float.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34474,"byte_end":34484,"line_start":82,"line_end":82,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34489,"byte_end":34492,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ Only the least significant bits of `self` may be set, 23 for `f32` and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34497,"byte_end":34571,"line_start":84,"line_end":84,"column_start":5,"column_end":79}},{"value":"/ 52 for `f64`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34576,"byte_end":34593,"line_start":85,"line_end":85,"column_start":5,"column_end":22}},{"value":"/ The resulting value will fall in a range that depends on the exponent.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34598,"byte_end":34672,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ As an example the range with exponent 0 will be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34677,"byte_end":34728,"line_start":87,"line_end":87,"column_start":5,"column_end":56}},{"value":"/ [2<sup>0</sup>..2<sup>1</sup>), which is [1..2).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\float.rs","byte_start":34733,"byte_end":34785,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1234},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":55266,"byte_end":55278,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"Alphanumeric","qualname":"::distributions::other::Alphanumeric","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample a `u8`, uniformly distributed over ASCII letters and numbers:\n a-z, A-Z and 0-9.","sig":null,"attributes":[{"value":"/ Sample a `u8`, uniformly distributed over ASCII letters and numbers:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53801,"byte_end":53873,"line_start":29,"line_end":29,"column_start":1,"column_end":73}},{"value":"/ a-z, A-Z and 0-9.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53874,"byte_end":53895,"line_start":30,"line_end":30,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53896,"byte_end":53899,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53900,"byte_end":53913,"line_start":32,"line_end":32,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53914,"byte_end":53917,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53918,"byte_end":53925,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use std::iter;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53926,"byte_end":53944,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53945,"byte_end":53977,"line_start":36,"line_end":36,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Alphanumeric;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":53978,"byte_end":54020,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54021,"byte_end":54024,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54025,"byte_end":54056,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/ let chars: String = iter::repeat(())","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54057,"byte_end":54097,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/         .map(|()| rng.sample(Alphanumeric))","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54098,"byte_end":54145,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/         .map(char::from)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54146,"byte_end":54174,"line_start":42,"line_end":42,"column_start":1,"column_end":29}},{"value":"/         .take(7)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54175,"byte_end":54195,"line_start":43,"line_end":43,"column_start":1,"column_end":21}},{"value":"/         .collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54196,"byte_end":54219,"line_start":44,"line_end":44,"column_start":1,"column_end":24}},{"value":"/ println!(\"Random chars: {}\", chars);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54220,"byte_end":54260,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54261,"byte_end":54268,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54269,"byte_end":54272,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ # Passwords","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54273,"byte_end":54288,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54289,"byte_end":54292,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Users sometimes ask whether it is safe to use a string of random characters","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54293,"byte_end":54372,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ as a password. In principle, all RNGs in Rand implementing `CryptoRng` are","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54373,"byte_end":54451,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ suitable as a source of randomness for generating passwords (if they are","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54452,"byte_end":54528,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ properly seeded), but it is more conservative to only use randomness","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54529,"byte_end":54601,"line_start":53,"line_end":53,"column_start":1,"column_end":73}},{"value":"/ directly from the operating system via the `getrandom` crate, or the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54602,"byte_end":54674,"line_start":54,"line_end":54,"column_start":1,"column_end":73}},{"value":"/ corresponding bindings of a crypto library.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54675,"byte_end":54722,"line_start":55,"line_end":55,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54723,"byte_end":54726,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ When generating passwords or keys, it is important to consider the threat","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54727,"byte_end":54804,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ model and in some cases the memorability of the password. This is out of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54805,"byte_end":54881,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/ scope of the Rand project, and therefore we defer to the following","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54882,"byte_end":54952,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/ references:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54953,"byte_end":54968,"line_start":60,"line_end":60,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54969,"byte_end":54972,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ - [Wikipedia article on Password Strength](https://en.wikipedia.org/wiki/Password_strength)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":54973,"byte_end":55068,"line_start":62,"line_end":62,"column_start":1,"column_end":96}},{"value":"/ - [Diceware for generating memorable passwords](https://en.wikipedia.org/wiki/Diceware)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":55069,"byte_end":55160,"line_start":63,"line_end":63,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1553},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66951,"byte_end":66956,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"Slice","qualname":"::distributions::slice::Slice","value":"Slice {  }","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1557}],"decl_id":null,"docs":" A distribution to sample items uniformly from a slice.","sig":null,"attributes":[{"value":"/ A distribution to sample items uniformly from a slice.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":64986,"byte_end":65044,"line_start":11,"line_end":11,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65045,"byte_end":65048,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ [`Slice::new`] constructs a distribution referencing a slice and uniformly","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65049,"byte_end":65127,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ samples references from the items in the slice. It may do extra work up","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65128,"byte_end":65203,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ front to make sampling of multiple values faster; if only one sample from","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65204,"byte_end":65281,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ the slice is required, [`SliceRandom::choose`] can be more efficient.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65282,"byte_end":65355,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65356,"byte_end":65359,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65360,"byte_end":65425,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `slice[rng.gen() % slice.len()]` samples from","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65426,"byte_end":65504,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ the slice, but may be more likely to select numbers in the low range than","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65505,"byte_end":65582,"line_start":20,"line_end":20,"column_start":1,"column_end":78}},{"value":"/ other values.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65583,"byte_end":65600,"line_start":21,"line_end":21,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65601,"byte_end":65604,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This distribution samples with replacement; each sample is independent.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65605,"byte_end":65680,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ Sampling without replacement requires state to be retained, and therefore","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65681,"byte_end":65758,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ cannot be handled by a distribution; you should instead consider methods","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65759,"byte_end":65835,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ on [`SliceRandom`], such as [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65836,"byte_end":65901,"line_start":26,"line_end":26,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65902,"byte_end":65905,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65906,"byte_end":65919,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65920,"byte_end":65923,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65924,"byte_end":65931,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65932,"byte_end":65950,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::Slice;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65951,"byte_end":65986,"line_start":32,"line_end":32,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65987,"byte_end":65990,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let vowels = ['a', 'e', 'i', 'o', 'u'];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":65991,"byte_end":66034,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/ let vowels_dist = Slice::new(&vowels).unwrap();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66035,"byte_end":66086,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/ let rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66087,"byte_end":66120,"line_start":36,"line_end":36,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66121,"byte_end":66124,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ // build a string of 10 vowels","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66125,"byte_end":66159,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/ let vowel_string: String = rng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66160,"byte_end":66194,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/     .sample_iter(&vowels_dist)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66195,"byte_end":66229,"line_start":40,"line_end":40,"column_start":1,"column_end":35}},{"value":"/     .take(10)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66230,"byte_end":66247,"line_start":41,"line_end":41,"column_start":1,"column_end":18}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66248,"byte_end":66267,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66268,"byte_end":66271,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", vowel_string);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66272,"byte_end":66305,"line_start":44,"line_end":44,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(vowel_string.len(), 10);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66306,"byte_end":66345,"line_start":45,"line_end":45,"column_start":1,"column_end":40}},{"value":"/ assert!(vowel_string.chars().all(|c| vowels.contains(&c)));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66346,"byte_end":66409,"line_start":46,"line_end":46,"column_start":1,"column_end":64}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66410,"byte_end":66417,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66418,"byte_end":66421,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`SliceRandom::choose`][crate::seq::SliceRandom::choose]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66422,"byte_end":66503,"line_start":49,"line_end":49,"column_start":1,"column_end":82}},{"value":"/ may be preferred:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66504,"byte_end":66525,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66526,"byte_end":66529,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66530,"byte_end":66537,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66538,"byte_end":66569,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66570,"byte_end":66573,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let vowels = ['a', 'e', 'i', 'o', 'u'];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66574,"byte_end":66617,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66618,"byte_end":66655,"line_start":56,"line_end":56,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66656,"byte_end":66659,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", vowels.choose(&mut rng).unwrap())","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66660,"byte_end":66712,"line_start":58,"line_end":58,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66713,"byte_end":66720,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66721,"byte_end":66724,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ [`SliceRandom`]: crate::seq::SliceRandom","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66725,"byte_end":66769,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ [`SliceRandom::choose`]: crate::seq::SliceRandom::choose","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66770,"byte_end":66830,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/ [`SliceRandom::choose_multiple`]: crate::seq::SliceRandom::choose_multiple","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":66831,"byte_end":66909,"line_start":63,"line_end":63,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67177,"byte_end":67180,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<Slice>::new","value":"pub fn new(&'a [T]) -> Result<Self, EmptySlice>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Slice` instance which samples uniformly from the slice.\n Returns `Err` if the slice is empty.\n","sig":null,"attributes":[{"value":"/ Create a new `Slice` instance which samples uniformly from the slice.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67047,"byte_end":67120,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ Returns `Err` if the slice is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67125,"byte_end":67165,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1569},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":68139,"byte_end":68149,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"EmptySlice","qualname":"::distributions::slice::EmptySlice","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error type indicating that a [`Slice`] distribution was improperly\n constructed with an empty slice.\n","sig":null,"attributes":[{"value":"/ Error type indicating that a [`Slice`] distribution was improperly","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67990,"byte_end":68060,"line_start":102,"line_end":102,"column_start":1,"column_end":71}},{"value":"/ constructed with an empty slice.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":68061,"byte_end":68097,"line_start":103,"line_end":103,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":249},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\utils.rs","byte_start":68954,"byte_end":68960,"line_start":15,"line_end":15,"column_start":10,"column_end":16},"name":"Output","qualname":"::distributions::utils::WideningMultiply::Output","value":"type Output;","parent":{"krate":0,"index":247},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\utils.rs","byte_start":75877,"byte_end":75881,"line_start":218,"line_end":218,"column_start":10,"column_end":14},"name":"Mask","qualname":"::distributions::utils::FloatSIMDUtils::Mask","value":"type Mask;","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":263},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\utils.rs","byte_start":76396,"byte_end":76400,"line_start":230,"line_end":230,"column_start":10,"column_end":14},"name":"UInt","qualname":"::distributions::utils::FloatSIMDUtils::UInt","value":"type UInt;","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1627},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85406,"byte_end":85419,"line_start":81,"line_end":81,"column_start":12,"column_end":25},"name":"WeightedIndex","qualname":"::distributions::weighted_index::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" A distribution using weighted sampling of discrete items","sig":null,"attributes":[{"value":"/ A distribution using weighted sampling of discrete items","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":82802,"byte_end":82862,"line_start":23,"line_end":23,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":82863,"byte_end":82866,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Sampling a `WeightedIndex` distribution returns the index of a randomly","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":82867,"byte_end":82942,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ selected element from the iterator used when the `WeightedIndex` was","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":82943,"byte_end":83015,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ created. The chance of a given element being picked is proportional to the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83016,"byte_end":83094,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ value of the element. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83095,"byte_end":83166,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83167,"byte_end":83211,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83212,"byte_end":83215,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83216,"byte_end":83233,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83234,"byte_end":83237,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Time complexity of sampling from `WeightedIndex` is `O(log N)` where","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83238,"byte_end":83310,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ `N` is the number of weights. As an alternative,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83311,"byte_end":83363,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ [`rand_distr::weighted_alias`](https://docs.rs/rand_distr/*/rand_distr/weighted_alias/index.html)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83364,"byte_end":83465,"line_start":35,"line_end":35,"column_start":1,"column_end":102}},{"value":"/ supports `O(1)` sampling, but with much higher initialisation cost.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83466,"byte_end":83537,"line_start":36,"line_end":36,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83538,"byte_end":83541,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ A `WeightedIndex<X>` contains a `Vec<X>` and a [`Uniform<X>`] and so its","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83542,"byte_end":83618,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ size is the sum of the size of those objects, possibly plus some alignment.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83619,"byte_end":83698,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83699,"byte_end":83702,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Creating a `WeightedIndex<X>` will allocate enough space to hold `N - 1`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83703,"byte_end":83779,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ weights of type `X`, where `N` is the number of weights. However, since","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83780,"byte_end":83855,"line_start":42,"line_end":42,"column_start":1,"column_end":76}},{"value":"/ `Vec` doesn't guarantee a particular growth strategy, additional memory","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83856,"byte_end":83931,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ might be allocated but not used. Since the `WeightedIndex` object also","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":83932,"byte_end":84006,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/ contains, this might cause additional allocations, though for primitive","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84007,"byte_end":84082,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ types, [`Uniform<X>`] doesn't allocate any memory.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84083,"byte_end":84137,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84138,"byte_end":84141,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Sampling from `WeightedIndex` will result in a single call to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84142,"byte_end":84207,"line_start":48,"line_end":48,"column_start":1,"column_end":66}},{"value":"/ `Uniform<X>::sample` (method of the [`Distribution`] trait), which typically","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84208,"byte_end":84288,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/ will request a single value from the underlying [`RngCore`], though the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84289,"byte_end":84364,"line_start":50,"line_end":50,"column_start":1,"column_end":76}},{"value":"/ exact number depends on the implementation of `Uniform<X>::sample`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84365,"byte_end":84436,"line_start":51,"line_end":51,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84437,"byte_end":84440,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84441,"byte_end":84454,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84455,"byte_end":84458,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84459,"byte_end":84466,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84467,"byte_end":84492,"line_start":56,"line_end":56,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::WeightedIndex;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84493,"byte_end":84536,"line_start":57,"line_end":57,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84537,"byte_end":84540,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let choices = ['a', 'b', 'c'];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84541,"byte_end":84575,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/ let weights = [2,   1,   1];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84576,"byte_end":84608,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/ let dist = WeightedIndex::new(&weights).unwrap();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84609,"byte_end":84662,"line_start":61,"line_end":61,"column_start":1,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84663,"byte_end":84694,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84695,"byte_end":84716,"line_start":63,"line_end":63,"column_start":1,"column_end":22}},{"value":"/     // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84717,"byte_end":84801,"line_start":64,"line_end":64,"column_start":1,"column_end":85}},{"value":"/     println!(\"{}\", choices[dist.sample(&mut rng)]);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84802,"byte_end":84857,"line_start":65,"line_end":65,"column_start":1,"column_end":56}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84858,"byte_end":84863,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84864,"byte_end":84867,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ let items = [('a', 0), ('b', 3), ('c', 7)];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84868,"byte_end":84915,"line_start":68,"line_end":68,"column_start":1,"column_end":48}},{"value":"/ let dist2 = WeightedIndex::new(items.iter().map(|item| item.1)).unwrap();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84916,"byte_end":84993,"line_start":69,"line_end":69,"column_start":1,"column_end":78}},{"value":"/ for _ in 0..100 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":84994,"byte_end":85015,"line_start":70,"line_end":70,"column_start":1,"column_end":22}},{"value":"/     // 0% chance to print 'a', 30% chance to print 'b', 70% chance to print 'c'","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85016,"byte_end":85099,"line_start":71,"line_end":71,"column_start":1,"column_end":84}},{"value":"/     println!(\"{}\", items[dist2.sample(&mut rng)].0);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85100,"byte_end":85156,"line_start":72,"line_end":72,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85157,"byte_end":85162,"line_start":73,"line_end":73,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85163,"byte_end":85170,"line_start":74,"line_end":74,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85171,"byte_end":85174,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ [`Uniform<X>`]: crate::distributions::Uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85175,"byte_end":85224,"line_start":76,"line_end":76,"column_start":1,"column_end":50}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85225,"byte_end":85256,"line_start":77,"line_end":77,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85993,"byte_end":85996,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedIndex<X>>::new","value":"pub fn new<I>(I) -> Result<WeightedIndex<X>, WeightedError> where\nI: IntoIterator, I::Item: SampleBorrow<X>,\nX: for<'a> ::core::ops::AddAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Creates a new a `WeightedIndex` [`Distribution`] using the values\n in `weights`. The weights can use any type `X` for which an\n implementation of [`Uniform<X>`] exists.","sig":null,"attributes":[{"value":"/ Creates a new a `WeightedIndex` [`Distribution`] using the values","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85605,"byte_end":85674,"line_start":88,"line_end":88,"column_start":5,"column_end":74}},{"value":"/ in `weights`. The weights can use any type `X` for which an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85679,"byte_end":85742,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"/ implementation of [`Uniform<X>`] exists.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85747,"byte_end":85791,"line_start":90,"line_end":90,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85796,"byte_end":85799,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the iterator is empty, if any weight is `< 0`, or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85804,"byte_end":85877,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ if its total value is 0.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85882,"byte_end":85910,"line_start":93,"line_end":93,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85915,"byte_end":85918,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ [`Uniform<X>`]: crate::distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85923,"byte_end":85981,"line_start":95,"line_end":95,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87684,"byte_end":87698,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"update_weights","qualname":"<WeightedIndex<X>>::update_weights","value":"pub fn update_weights(&mut Self, &[(usize, &X)]) -> Result<(), WeightedError>\nwhere X: for<'a> ::core::ops::AddAssign<&'a X> +\nfor<'a> ::core::ops::SubAssign<&'a X> + Clone + Default","parent":null,"children":[],"decl_id":null,"docs":" Update a subset of weights, without changing the number of weights.","sig":null,"attributes":[{"value":"/ Update a subset of weights, without changing the number of weights.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87261,"byte_end":87332,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87337,"byte_end":87340,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ `new_weights` must be sorted by the index.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87345,"byte_end":87391,"line_start":135,"line_end":135,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87396,"byte_end":87399,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Using this method instead of `new` might be more efficient if only a small number of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87404,"byte_end":87492,"line_start":137,"line_end":137,"column_start":5,"column_end":93}},{"value":"/ weights is modified. No allocations are performed, unless the weight type `X` uses","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87497,"byte_end":87583,"line_start":138,"line_end":138,"column_start":5,"column_end":91}},{"value":"/ allocation internally.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87588,"byte_end":87614,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87619,"byte_end":87622,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ In case of error, `self` is not modified.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":87627,"byte_end":87672,"line_start":141,"line_end":141,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1639},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97309,"byte_end":97315,"line_start":428,"line_end":428,"column_start":5,"column_end":11},"name":"NoItem","qualname":"::distributions::weighted_index::WeightedError::NoItem","value":"WeightedError::NoItem","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" The provided weight collection contains no items.\n","sig":null,"attributes":[{"value":"/ The provided weight collection contains no items.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97251,"byte_end":97304,"line_start":427,"line_end":427,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1641},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97436,"byte_end":97449,"line_start":432,"line_end":432,"column_start":5,"column_end":18},"name":"InvalidWeight","qualname":"::distributions::weighted_index::WeightedError::InvalidWeight","value":"WeightedError::InvalidWeight","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" A weight is either less than zero, greater than the supported maximum,\n NaN, or otherwise invalid.\n","sig":null,"attributes":[{"value":"/ A weight is either less than zero, greater than the supported maximum,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97322,"byte_end":97396,"line_start":430,"line_end":430,"column_start":5,"column_end":79}},{"value":"/ NaN, or otherwise invalid.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97401,"byte_end":97431,"line_start":431,"line_end":431,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1643},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97518,"byte_end":97532,"line_start":435,"line_end":435,"column_start":5,"column_end":19},"name":"AllWeightsZero","qualname":"::distributions::weighted_index::WeightedError::AllWeightsZero","value":"WeightedError::AllWeightsZero","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" All items in the provided weight collection are zero.\n","sig":null,"attributes":[{"value":"/ All items in the provided weight collection are zero.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97456,"byte_end":97513,"line_start":434,"line_end":434,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1645},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97610,"byte_end":97617,"line_start":438,"line_end":438,"column_start":5,"column_end":12},"name":"TooMany","qualname":"::distributions::weighted_index::WeightedError::TooMany","value":"WeightedError::TooMany","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" Too many weights are provided (length greater than `u32::MAX`)\n","sig":null,"attributes":[{"value":"/ Too many weights are provided (length greater than `u32::MAX`)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97539,"byte_end":97605,"line_start":437,"line_end":437,"column_start":5,"column_end":71}}]},{"kind":"Enum","id":{"krate":0,"index":1638},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97231,"byte_end":97244,"line_start":426,"line_end":426,"column_start":10,"column_end":23},"name":"WeightedError","qualname":"::distributions::weighted_index::WeightedError","value":"pub enum WeightedError { NoItem, InvalidWeight, AllWeightsZero, TooMany, }","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1645}],"decl_id":null,"docs":" Error type returned from `WeightedIndex::new`.\n","sig":null,"attributes":[{"value":"/ Error type returned from `WeightedIndex::new`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97076,"byte_end":97126,"line_start":423,"line_end":423,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11264,"byte_end":11277,"line_start":107,"line_end":107,"column_start":9,"column_end":22},"name":"hidden_export","qualname":"::distributions::hidden_export","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","parent":null,"children":[{"krate":0,"index":329}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"uniform","qualname":"::distributions::uniform","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":359},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":1658},{"krate":0,"index":1662},{"krate":0,"index":1665},{"krate":0,"index":1667},{"krate":0,"index":369},{"krate":0,"index":377},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":417},{"krate":0,"index":422},{"krate":0,"index":427},{"krate":0,"index":1670},{"krate":0,"index":1675},{"krate":0,"index":1678},{"krate":0,"index":1680},{"krate":0,"index":1683},{"krate":0,"index":1685},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1823},{"krate":0,"index":1825},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1863},{"krate":0,"index":1865},{"krate":0,"index":1883},{"krate":0,"index":1885},{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":433},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1928},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":1930},{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1944},{"krate":0,"index":1958},{"krate":0,"index":1960},{"krate":0,"index":1974},{"krate":0,"index":1977},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1992},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":449},{"krate":0,"index":451}],"decl_id":null,"docs":" A distribution uniformly sampling numbers within a given range.","sig":null,"attributes":[{"value":"/ A distribution uniformly sampling numbers within a given range.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98583,"byte_end":98650,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98651,"byte_end":98654,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`] is the standard distribution to sample uniformly from a range;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98655,"byte_end":98733,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ e.g. `Uniform::new_inclusive(1, 6)` can sample integers from 1 to 6, like a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98734,"byte_end":98813,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ standard die. [`Rng::gen_range`] supports any type supported by","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98814,"byte_end":98881,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ [`Uniform`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98882,"byte_end":98898,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98899,"byte_end":98902,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This distribution is provided with support for several primitive types","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98903,"byte_end":98977,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (all integer and floating-point types) as well as [`std::time::Duration`],","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":98978,"byte_end":99056,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ and supports extension to user-defined types via a type-specific *back-end*","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99057,"byte_end":99136,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ implementation.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99137,"byte_end":99156,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99157,"byte_end":99160,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The types [`UniformInt`], [`UniformFloat`] and [`UniformDuration`] are the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99161,"byte_end":99239,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ back-ends supporting sampling from primitive integer and floating-point","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99240,"byte_end":99315,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ ranges as well as from [`std::time::Duration`]; these types do not normally","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99316,"byte_end":99395,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/ need to be used directly (unless implementing a derived back-end).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99396,"byte_end":99466,"line_start":25,"line_end":25,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99467,"byte_end":99470,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Example usage","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99471,"byte_end":99490,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99491,"byte_end":99494,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99495,"byte_end":99502,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use rand::{Rng, thread_rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99503,"byte_end":99535,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99536,"byte_end":99573,"line_start":31,"line_end":31,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99574,"byte_end":99577,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99578,"byte_end":99609,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/ let side = Uniform::new(-10.0, 10.0);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99610,"byte_end":99651,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99652,"byte_end":99655,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // sample between 1 and 10 points","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99656,"byte_end":99693,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..rng.gen_range(1..=10) {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99694,"byte_end":99733,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     // sample a point from the square with sides -10 - 10 in two dimensions","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99734,"byte_end":99813,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/     let (x, y) = (rng.sample(side), rng.sample(side));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99814,"byte_end":99872,"line_start":39,"line_end":39,"column_start":1,"column_end":59}},{"value":"/     println!(\"Point: {}, {}\", x, y);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99873,"byte_end":99913,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99914,"byte_end":99919,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99920,"byte_end":99927,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99928,"byte_end":99931,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Extending `Uniform` to support a custom type","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99932,"byte_end":99982,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99983,"byte_end":99986,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ To extend [`Uniform`] to support your own types, write a back-end which","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":99987,"byte_end":100062,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ implements the [`UniformSampler`] trait, then implement the [`SampleUniform`]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100063,"byte_end":100144,"line_start":47,"line_end":47,"column_start":1,"column_end":82}},{"value":"/ helper trait to \"register\" your back-end. See the `MyF32` example below.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100145,"byte_end":100221,"line_start":48,"line_end":48,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100222,"byte_end":100225,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ At a minimum, the back-end needs to store any parameters needed for sampling","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100226,"byte_end":100306,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ (e.g. the target range) and implement `new`, `new_inclusive` and `sample`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100307,"byte_end":100385,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ Those methods should include an assert to check the range is valid (i.e.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100386,"byte_end":100462,"line_start":52,"line_end":52,"column_start":1,"column_end":77}},{"value":"/ `low < high`). The example below merely wraps another back-end.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100463,"byte_end":100530,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100531,"byte_end":100534,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ The `new`, `new_inclusive` and `sample_single` functions use arguments of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100535,"byte_end":100612,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ type SampleBorrow<X> in order to support passing in values by reference or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100613,"byte_end":100691,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ by value. In the implementation of these functions, you can choose to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100692,"byte_end":100765,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ simply use the reference returned by [`SampleBorrow::borrow`], or you can choose","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100766,"byte_end":100850,"line_start":58,"line_end":58,"column_start":1,"column_end":85}},{"value":"/ to copy or clone the value, whatever is appropriate for your type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100851,"byte_end":100921,"line_start":59,"line_end":59,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100922,"byte_end":100925,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100926,"byte_end":100933,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100934,"byte_end":100959,"line_start":62,"line_end":62,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::uniform::{Uniform, SampleUniform,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":100960,"byte_end":101022,"line_start":63,"line_end":63,"column_start":1,"column_end":63}},{"value":"/         UniformSampler, UniformFloat, SampleBorrow};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101023,"byte_end":101079,"line_start":64,"line_end":64,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101080,"byte_end":101083,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ struct MyF32(f32);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101084,"byte_end":101106,"line_start":66,"line_end":66,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101107,"byte_end":101110,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone, Copy, Debug)]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101111,"byte_end":101144,"line_start":68,"line_end":68,"column_start":1,"column_end":34}},{"value":"/ struct UniformMyF32(UniformFloat<f32>);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101145,"byte_end":101188,"line_start":69,"line_end":69,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101189,"byte_end":101192,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ impl UniformSampler for UniformMyF32 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101193,"byte_end":101235,"line_start":71,"line_end":71,"column_start":1,"column_end":43}},{"value":"/     type X = MyF32;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101236,"byte_end":101259,"line_start":72,"line_end":72,"column_start":1,"column_end":24}},{"value":"/     fn new<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101260,"byte_end":101309,"line_start":73,"line_end":73,"column_start":1,"column_end":50}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101310,"byte_end":101362,"line_start":74,"line_end":74,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101363,"byte_end":101414,"line_start":75,"line_end":75,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101415,"byte_end":101424,"line_start":76,"line_end":76,"column_start":1,"column_end":10}},{"value":"/         UniformMyF32(UniformFloat::<f32>::new(low.borrow().0, high.borrow().0))","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101425,"byte_end":101508,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/     }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101509,"byte_end":101518,"line_start":78,"line_end":78,"column_start":1,"column_end":10}},{"value":"/     fn new_inclusive<B1, B2>(low: B1, high: B2) -> Self","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101519,"byte_end":101578,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/         where B1: SampleBorrow<Self::X> + Sized,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101579,"byte_end":101631,"line_start":80,"line_end":80,"column_start":1,"column_end":53}},{"value":"/               B2: SampleBorrow<Self::X> + Sized","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101632,"byte_end":101683,"line_start":81,"line_end":81,"column_start":1,"column_end":52}},{"value":"/     {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101684,"byte_end":101693,"line_start":82,"line_end":82,"column_start":1,"column_end":10}},{"value":"/         UniformSampler::new(low, high)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101694,"byte_end":101736,"line_start":83,"line_end":83,"column_start":1,"column_end":43}},{"value":"/     }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101737,"byte_end":101746,"line_start":84,"line_end":84,"column_start":1,"column_end":10}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101747,"byte_end":101814,"line_start":85,"line_end":85,"column_start":1,"column_end":68}},{"value":"/         MyF32(self.0.sample(rng))","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101815,"byte_end":101852,"line_start":86,"line_end":86,"column_start":1,"column_end":38}},{"value":"/     }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101853,"byte_end":101862,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101863,"byte_end":101868,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101869,"byte_end":101872,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl SampleUniform for MyF32 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101873,"byte_end":101907,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/     type Sampler = UniformMyF32;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101908,"byte_end":101944,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101945,"byte_end":101950,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101951,"byte_end":101954,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ let (low, high) = (MyF32(17.0f32), MyF32(22.0f32));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":101955,"byte_end":102010,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/ let uniform = Uniform::new(low, high);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102011,"byte_end":102053,"line_start":95,"line_end":95,"column_start":1,"column_end":43}},{"value":"/ let x = uniform.sample(&mut thread_rng());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102054,"byte_end":102100,"line_start":96,"line_end":96,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102101,"byte_end":102108,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102109,"byte_end":102112,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`SampleUniform`]: crate::distributions::uniform::SampleUniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102113,"byte_end":102180,"line_start":99,"line_end":99,"column_start":1,"column_end":68}},{"value":"/ [`UniformSampler`]: crate::distributions::uniform::UniformSampler","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102181,"byte_end":102250,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/ [`UniformInt`]: crate::distributions::uniform::UniformInt","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102251,"byte_end":102312,"line_start":101,"line_end":101,"column_start":1,"column_end":62}},{"value":"/ [`UniformFloat`]: crate::distributions::uniform::UniformFloat","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102313,"byte_end":102378,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ [`UniformDuration`]: crate::distributions::uniform::UniformDuration","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102379,"byte_end":102450,"line_start":103,"line_end":103,"column_start":1,"column_end":72}},{"value":"/ [`SampleBorrow::borrow`]: crate::distributions::uniform::SampleBorrow::borrow","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":102451,"byte_end":102532,"line_start":104,"line_end":104,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1658},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105308,"byte_end":105315,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"Uniform","qualname":"::distributions::uniform::Uniform","value":"","parent":null,"children":[],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103150,"byte_end":103197,"line_start":124,"line_end":124,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103198,"byte_end":103201,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [`Uniform::new`] and [`Uniform::new_inclusive`] construct a uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103202,"byte_end":103273,"line_start":126,"line_end":126,"column_start":1,"column_end":72}},{"value":"/ distribution sampling from the given range; these functions may do extra","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103274,"byte_end":103350,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ work up front to make sampling of multiple values faster. If only one sample","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103351,"byte_end":103431,"line_start":128,"line_end":128,"column_start":1,"column_end":81}},{"value":"/ from the range is required, [`Rng::gen_range`] can be more efficient.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103432,"byte_end":103505,"line_start":129,"line_end":129,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103506,"byte_end":103509,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ When sampling from a constant range, many calculations can happen at","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103510,"byte_end":103582,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ compile-time and all methods should be fast; for floating-point ranges and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103583,"byte_end":103661,"line_start":132,"line_end":132,"column_start":1,"column_end":79}},{"value":"/ the full range of integer types this should have comparable performance to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103662,"byte_end":103740,"line_start":133,"line_end":133,"column_start":1,"column_end":79}},{"value":"/ the `Standard` distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103741,"byte_end":103773,"line_start":134,"line_end":134,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103774,"byte_end":103777,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ Steps are taken to avoid bias which might be present in naive","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103778,"byte_end":103843,"line_start":136,"line_end":136,"column_start":1,"column_end":66}},{"value":"/ implementations; for example `rng.gen::<u8>() % 170` samples from the range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103844,"byte_end":103923,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/ `[0, 169]` but is twice as likely to select numbers less than 85 than other","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":103924,"byte_end":104003,"line_start":138,"line_end":138,"column_start":1,"column_end":80}},{"value":"/ values. Further, the implementations here give more weight to the high-bits","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104004,"byte_end":104083,"line_start":139,"line_end":139,"column_start":1,"column_end":80}},{"value":"/ generated by the RNG than the low bits, since with some RNGs the low-bits","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104084,"byte_end":104161,"line_start":140,"line_end":140,"column_start":1,"column_end":78}},{"value":"/ are of lower quality than the high bits.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104162,"byte_end":104206,"line_start":141,"line_end":141,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104207,"byte_end":104210,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ Implementations must sample in `[low, high)` range for","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104211,"byte_end":104269,"line_start":143,"line_end":143,"column_start":1,"column_end":59}},{"value":"/ `Uniform::new(low, high)`, i.e., excluding `high`. In particular, care must","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104270,"byte_end":104349,"line_start":144,"line_end":144,"column_start":1,"column_end":80}},{"value":"/ be taken to ensure that rounding never results values `< low` or `>= high`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104350,"byte_end":104429,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104430,"byte_end":104433,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104434,"byte_end":104447,"line_start":147,"line_end":147,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104448,"byte_end":104451,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104452,"byte_end":104459,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{Distribution, Uniform};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104460,"byte_end":104513,"line_start":150,"line_end":150,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104514,"byte_end":104517,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ let between = Uniform::from(10..10000);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104518,"byte_end":104561,"line_start":152,"line_end":152,"column_start":1,"column_end":44}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104562,"byte_end":104599,"line_start":153,"line_end":153,"column_start":1,"column_end":38}},{"value":"/ let mut sum = 0;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104600,"byte_end":104620,"line_start":154,"line_end":154,"column_start":1,"column_end":21}},{"value":"/ for _ in 0..1000 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104621,"byte_end":104643,"line_start":155,"line_end":155,"column_start":1,"column_end":23}},{"value":"/     sum += between.sample(&mut rng);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104644,"byte_end":104684,"line_start":156,"line_end":156,"column_start":1,"column_end":41}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104685,"byte_end":104690,"line_start":157,"line_end":157,"column_start":1,"column_end":6}},{"value":"/ println!(\"{}\", sum);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104691,"byte_end":104715,"line_start":158,"line_end":158,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104716,"byte_end":104723,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104724,"byte_end":104727,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For a single sample, [`Rng::gen_range`] may be preferred:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104728,"byte_end":104789,"line_start":161,"line_end":161,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104790,"byte_end":104793,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104794,"byte_end":104801,"line_start":163,"line_end":163,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104802,"byte_end":104820,"line_start":164,"line_end":164,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104821,"byte_end":104824,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104825,"byte_end":104862,"line_start":166,"line_end":166,"column_start":1,"column_end":38}},{"value":"/ println!(\"{}\", rng.gen_range(0..10));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104863,"byte_end":104904,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104905,"byte_end":104912,"line_start":168,"line_end":168,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104913,"byte_end":104916,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`new`]: Uniform::new","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104917,"byte_end":104942,"line_start":170,"line_end":170,"column_start":1,"column_end":26}},{"value":"/ [`new_inclusive`]: Uniform::new_inclusive","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104943,"byte_end":104988,"line_start":171,"line_end":171,"column_start":1,"column_end":46}},{"value":"/ [`Rng::gen_range`]: Rng::gen_range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":104989,"byte_end":105027,"line_start":172,"line_end":172,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105551,"byte_end":105554,"line_start":182,"line_end":182,"column_start":12,"column_end":15},"name":"new","qualname":"<Uniform<X>>::new","value":"pub fn new<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> + Sized,\nB2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the half\n open range `[low, high)` (excluding `high`). Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the half","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105388,"byte_end":105461,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/ open range `[low, high)` (excluding `high`). Panics if `low >= high`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105466,"byte_end":105539,"line_start":181,"line_end":181,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105893,"byte_end":105906,"line_start":192,"line_end":192,"column_start":12,"column_end":25},"name":"new_inclusive","qualname":"<Uniform<X>>::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Uniform<X> where B1: SampleBorrow<X> +\nSized, B2: SampleBorrow<X> + Sized","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Uniform` instance which samples uniformly from the closed\n range `[low, high]` (inclusive). Panics if `low > high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Uniform` instance which samples uniformly from the closed","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105741,"byte_end":105816,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/ range `[low, high]` (inclusive). Panics if `low > high`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105821,"byte_end":105881,"line_start":191,"line_end":191,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":381},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106552,"byte_end":106565,"line_start":214,"line_end":214,"column_start":11,"column_end":24},"name":"SampleUniform","qualname":"::distributions::uniform::SampleUniform","value":"SampleUniform: Sized","parent":null,"children":[{"krate":0,"index":382}],"decl_id":null,"docs":" Helper trait for creating objects using the correct implementation of\n [`UniformSampler`] for the sampling type.","sig":null,"attributes":[{"value":"/ Helper trait for creating objects using the correct implementation of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106251,"byte_end":106324,"line_start":207,"line_end":207,"column_start":1,"column_end":74}},{"value":"/ [`UniformSampler`] for the sampling type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106325,"byte_end":106370,"line_start":208,"line_end":208,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106371,"byte_end":106374,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106375,"byte_end":106447,"line_start":210,"line_end":210,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106448,"byte_end":106479,"line_start":211,"line_end":211,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106480,"byte_end":106483,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106484,"byte_end":106541,"line_start":213,"line_end":213,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":382},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106649,"byte_end":106656,"line_start":216,"line_end":216,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::distributions::uniform::SampleUniform::Sampler","value":"type Sampler: UniformSampler<X = Self>;","parent":{"krate":0,"index":381},"children":[],"decl_id":null,"docs":" The `UniformSampler` implementation supporting type `X`.\n","sig":null,"attributes":[{"value":"/ The `UniformSampler` implementation supporting type `X`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106579,"byte_end":106639,"line_start":215,"line_end":215,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":383},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107131,"byte_end":107145,"line_start":229,"line_end":229,"column_start":11,"column_end":25},"name":"UniformSampler","qualname":"::distributions::uniform::UniformSampler","value":"UniformSampler: Sized","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":397}],"decl_id":null,"docs":" Helper trait handling actual uniform sampling.","sig":null,"attributes":[{"value":"/ Helper trait handling actual uniform sampling.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106687,"byte_end":106737,"line_start":219,"line_end":219,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106738,"byte_end":106741,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See the [module documentation] on how to implement [`Uniform`] range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106742,"byte_end":106814,"line_start":221,"line_end":221,"column_start":1,"column_end":73}},{"value":"/ sampling for a custom type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106815,"byte_end":106846,"line_start":222,"line_end":222,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106847,"byte_end":106850,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ Implementation of [`sample_single`] is optional, and is only useful when","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106851,"byte_end":106927,"line_start":224,"line_end":224,"column_start":1,"column_end":77}},{"value":"/ the implementation can be faster than `Self::new(low, high).sample(rng)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106928,"byte_end":107005,"line_start":225,"line_end":225,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107006,"byte_end":107009,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ [module documentation]: crate::distributions::uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107010,"byte_end":107067,"line_start":227,"line_end":227,"column_start":1,"column_end":58}},{"value":"/ [`sample_single`]: UniformSampler::sample_single","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107068,"byte_end":107120,"line_start":228,"line_end":228,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107213,"byte_end":107214,"line_start":231,"line_end":231,"column_start":10,"column_end":11},"name":"X","qualname":"::distributions::uniform::UniformSampler::X","value":"type X;","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" The type sampled by this implementation.\n","sig":null,"attributes":[{"value":"/ The type sampled by this implementation.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107159,"byte_end":107203,"line_start":230,"line_end":230,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107477,"byte_end":107480,"line_start":238,"line_end":238,"column_start":8,"column_end":11},"name":"new","qualname":"::distributions::uniform::UniformSampler::new","value":"pub fn new<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Construct self, with inclusive lower bound and exclusive upper bound\n `[low, high)`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive lower bound and exclusive upper bound","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107221,"byte_end":107293,"line_start":233,"line_end":233,"column_start":5,"column_end":77}},{"value":"/ `[low, high)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107298,"byte_end":107316,"line_start":234,"line_end":234,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107321,"byte_end":107324,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107329,"byte_end":107392,"line_start":236,"line_end":236,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new`, which asserts that `low < high` before calling this.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107397,"byte_end":107469,"line_start":237,"line_end":237,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107853,"byte_end":107866,"line_start":248,"line_end":248,"column_start":8,"column_end":21},"name":"new_inclusive","qualname":"::distributions::uniform::UniformSampler::new_inclusive","value":"pub fn new_inclusive<B1, B2>(B1, B2) -> Self where B1: SampleBorrow<Self::X> +\nSized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Construct self, with inclusive bounds `[low, high]`.","sig":null,"attributes":[{"value":"/ Construct self, with inclusive bounds `[low, high]`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107617,"byte_end":107673,"line_start":243,"line_end":243,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107678,"byte_end":107681,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Usually users should not call this directly but instead use","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107686,"byte_end":107749,"line_start":245,"line_end":245,"column_start":5,"column_end":68}},{"value":"/ `Uniform::new_inclusive`, which asserts that `low <= high` before","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107754,"byte_end":107823,"line_start":246,"line_end":246,"column_start":5,"column_end":74}},{"value":"/ calling this.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107828,"byte_end":107845,"line_start":247,"line_end":247,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108030,"byte_end":108036,"line_start":254,"line_end":254,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::uniform::UniformSampler::sample","value":"pub fn sample<R: Rng + ?Sized>(&Self, &mut R) -> Self::X","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Sample a value.\n","sig":null,"attributes":[{"value":"/ Sample a value.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108003,"byte_end":108022,"line_start":253,"line_end":253,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109011,"byte_end":109024,"line_start":275,"line_end":275,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::UniformSampler::sample_single","value":"pub fn sample_single<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R) -> Self::X where\nB1: SampleBorrow<Self::X> + Sized, B2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and exclusive upper bound `[low, high)`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108091,"byte_end":108166,"line_start":256,"line_end":256,"column_start":5,"column_end":80}},{"value":"/ and exclusive upper bound `[low, high)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108171,"byte_end":108215,"line_start":257,"line_end":257,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108220,"byte_end":108223,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108228,"byte_end":108268,"line_start":259,"line_end":259,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new(low, high).sample(rng)`. However, for some types","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108273,"byte_end":108346,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ more optimal implementations for single usage may be provided via this","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108351,"byte_end":108425,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/ method (which is the case for integers and floats).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108430,"byte_end":108485,"line_start":262,"line_end":262,"column_start":5,"column_end":60}},{"value":"/ Results may not be identical.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108490,"byte_end":108523,"line_start":263,"line_end":263,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108528,"byte_end":108531,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Note that to use this method in a generic context, the type needs to be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108536,"byte_end":108611,"line_start":265,"line_end":265,"column_start":5,"column_end":80}},{"value":"/ retrieved via `SampleUniform::Sampler` as follows:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108616,"byte_end":108670,"line_start":266,"line_end":266,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108675,"byte_end":108682,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, distributions::uniform::{SampleUniform, UniformSampler}};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108687,"byte_end":108771,"line_start":268,"line_end":268,"column_start":5,"column_end":89}},{"value":"/ # #[allow(unused)]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108776,"byte_end":108798,"line_start":269,"line_end":269,"column_start":5,"column_end":27}},{"value":"/ fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108803,"byte_end":108866,"line_start":270,"line_end":270,"column_start":5,"column_end":68}},{"value":"/     let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108871,"byte_end":108906,"line_start":271,"line_end":271,"column_start":5,"column_end":40}},{"value":"/     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108911,"byte_end":108981,"line_start":272,"line_end":272,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108986,"byte_end":108991,"line_start":273,"line_end":273,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":108996,"byte_end":109003,"line_start":274,"line_end":274,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109700,"byte_end":109723,"line_start":292,"line_end":292,"column_start":8,"column_end":31},"name":"sample_single_inclusive","qualname":"::distributions::uniform::UniformSampler::sample_single_inclusive","value":"pub fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(B1, B2, &mut R)\n-> Self::X where B1: SampleBorrow<Self::X> + Sized,\nB2: SampleBorrow<Self::X> + Sized","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":" Sample a single value uniformly from a range with inclusive lower bound\n and inclusive upper bound `[low, high]`.","sig":null,"attributes":[{"value":"/ Sample a single value uniformly from a range with inclusive lower bound","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109294,"byte_end":109369,"line_start":284,"line_end":284,"column_start":5,"column_end":80}},{"value":"/ and inclusive upper bound `[low, high]`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109374,"byte_end":109418,"line_start":285,"line_end":285,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109423,"byte_end":109426,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented using","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109431,"byte_end":109471,"line_start":287,"line_end":287,"column_start":5,"column_end":45}},{"value":"/ `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109476,"byte_end":109548,"line_start":288,"line_end":288,"column_start":5,"column_end":77}},{"value":"/ some types more optimal implementations for single usage may be provided","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109553,"byte_end":109629,"line_start":289,"line_end":289,"column_start":5,"column_end":81}},{"value":"/ via this method.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109634,"byte_end":109654,"line_start":290,"line_end":290,"column_start":5,"column_end":25}},{"value":"/ Results may not be identical.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":109659,"byte_end":109692,"line_start":291,"line_end":291,"column_start":5,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110559,"byte_end":110571,"line_start":320,"line_end":320,"column_start":11,"column_end":23},"name":"SampleBorrow","qualname":"::distributions::uniform::SampleBorrow","value":"SampleBorrow<Borrowed>","parent":null,"children":[{"krate":0,"index":409}],"decl_id":null,"docs":" Helper trait similar to [`Borrow`] but implemented\n only for SampleUniform and references to SampleUniform in\n order to resolve ambiguity issues.","sig":null,"attributes":[{"value":"/ Helper trait similar to [`Borrow`] but implemented","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110353,"byte_end":110407,"line_start":315,"line_end":315,"column_start":1,"column_end":55}},{"value":"/ only for SampleUniform and references to SampleUniform in","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110408,"byte_end":110469,"line_start":316,"line_end":316,"column_start":1,"column_end":62}},{"value":"/ order to resolve ambiguity issues.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110470,"byte_end":110508,"line_start":317,"line_end":317,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110509,"byte_end":110512,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ [`Borrow`]: std::borrow::Borrow","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110513,"byte_end":110548,"line_start":319,"line_end":319,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110725,"byte_end":110731,"line_start":324,"line_end":324,"column_start":8,"column_end":14},"name":"borrow","qualname":"::distributions::uniform::SampleBorrow::borrow","value":"pub fn borrow(&Self) -> &Borrowed","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Immutably borrows from an owned value. See [`Borrow::borrow`]","sig":null,"attributes":[{"value":"/ Immutably borrows from an owned value. See [`Borrow::borrow`]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110588,"byte_end":110653,"line_start":321,"line_end":321,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110658,"byte_end":110661,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ [`Borrow::borrow`]: std::borrow::Borrow::borrow","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110666,"byte_end":110717,"line_start":323,"line_end":323,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111271,"byte_end":111282,"line_start":347,"line_end":347,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::uniform::SampleRange","value":"SampleRange<T>","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":421}],"decl_id":null,"docs":" Range that supports generating a single sample efficiently.","sig":null,"attributes":[{"value":"/ Range that supports generating a single sample efficiently.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111089,"byte_end":111152,"line_start":343,"line_end":343,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111153,"byte_end":111156,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ Any type implementing this trait can be used to specify the sampled range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111157,"byte_end":111234,"line_start":345,"line_end":345,"column_start":1,"column_end":78}},{"value":"/ for `Rng::gen_range`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111235,"byte_end":111260,"line_start":346,"line_end":346,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111343,"byte_end":111356,"line_start":349,"line_end":349,"column_start":8,"column_end":21},"name":"sample_single","qualname":"::distributions::uniform::SampleRange::sample_single","value":"pub fn sample_single<R: RngCore + ?Sized>(Self, &mut R) -> T","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Generate a sample from the given range.\n","sig":null,"attributes":[{"value":"/ Generate a sample from the given range.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111292,"byte_end":111335,"line_start":348,"line_end":348,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111453,"byte_end":111461,"line_start":352,"line_end":352,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::distributions::uniform::SampleRange::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":{"krate":0,"index":417},"children":[],"decl_id":null,"docs":" Check whether the range is empty.\n","sig":null,"attributes":[{"value":"/ Check whether the range is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111408,"byte_end":111445,"line_start":351,"line_end":351,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1670},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":114248,"byte_end":114258,"line_start":421,"line_end":421,"column_start":12,"column_end":22},"name":"UniformInt","qualname":"::distributions::uniform::UniformInt","value":"UniformInt {  }","parent":null,"children":[{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for integer types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for integer types.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112239,"byte_end":112306,"line_start":385,"line_end":385,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112307,"byte_end":112310,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112311,"byte_end":112390,"line_start":387,"line_end":387,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112391,"byte_end":112448,"line_start":388,"line_end":388,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112449,"byte_end":112452,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112453,"byte_end":112479,"line_start":390,"line_end":390,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112480,"byte_end":112483,"line_start":391,"line_end":391,"column_start":1,"column_end":4}},{"value":"/ For simplicity, we use the same generic struct `UniformInt<X>` for all","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112484,"byte_end":112558,"line_start":392,"line_end":392,"column_start":1,"column_end":75}},{"value":"/ integer types `X`. This gives us only one field type, `X`; to store unsigned","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112559,"byte_end":112639,"line_start":393,"line_end":393,"column_start":1,"column_end":81}},{"value":"/ values of this size, we take use the fact that these conversions are no-ops.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112640,"byte_end":112720,"line_start":394,"line_end":394,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112721,"byte_end":112724,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ For a closed range, the number of possible numbers we should generate is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112725,"byte_end":112801,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ `range = (high - low + 1)`. To avoid bias, we must ensure that the size of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112802,"byte_end":112880,"line_start":397,"line_end":397,"column_start":1,"column_end":79}},{"value":"/ our sample space, `zone`, is a multiple of `range`; other values must be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112881,"byte_end":112957,"line_start":398,"line_end":398,"column_start":1,"column_end":77}},{"value":"/ rejected (by replacing with a new random sample).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":112958,"byte_end":113011,"line_start":399,"line_end":399,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113012,"byte_end":113015,"line_start":400,"line_end":400,"column_start":1,"column_end":4}},{"value":"/ As a special case, we use `range = 0` to represent the full range of the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113016,"byte_end":113092,"line_start":401,"line_end":401,"column_start":1,"column_end":77}},{"value":"/ result type (i.e. for `new_inclusive($ty::MIN, $ty::MAX)`).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113093,"byte_end":113156,"line_start":402,"line_end":402,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113157,"byte_end":113160,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ The optimum `zone` is the largest product of `range` which fits in our","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113161,"byte_end":113235,"line_start":404,"line_end":404,"column_start":1,"column_end":75}},{"value":"/ (unsigned) target type. We calculate this by calculating how many numbers we","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113236,"byte_end":113316,"line_start":405,"line_end":405,"column_start":1,"column_end":81}},{"value":"/ must reject: `reject = (MAX + 1) % range = (MAX - range + 1) % range`. Any (large)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113317,"byte_end":113403,"line_start":406,"line_end":406,"column_start":1,"column_end":87}},{"value":"/ product of `range` will suffice, thus in `sample_single` we multiply by a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113404,"byte_end":113481,"line_start":407,"line_end":407,"column_start":1,"column_end":78}},{"value":"/ power of 2 via bit-shifting (faster but may cause more rejections).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113482,"byte_end":113553,"line_start":408,"line_end":408,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113554,"byte_end":113557,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ The smallest integer PRNGs generate is `u32`. For 8- and 16-bit outputs we","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113558,"byte_end":113636,"line_start":410,"line_end":410,"column_start":1,"column_end":79}},{"value":"/ use `u32` for our `zone` and samples (because it's not slower and because","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113637,"byte_end":113714,"line_start":411,"line_end":411,"column_start":1,"column_end":78}},{"value":"/ it reduces the chance of having to reject a sample). In this case we cannot","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113715,"byte_end":113794,"line_start":412,"line_end":412,"column_start":1,"column_end":80}},{"value":"/ store `zone` in the target type since it is too large, however we know","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113795,"byte_end":113869,"line_start":413,"line_end":413,"column_start":1,"column_end":75}},{"value":"/ `ints_to_reject < range <= $unsigned::MAX`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113870,"byte_end":113917,"line_start":414,"line_end":414,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113918,"byte_end":113921,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ An alternative to using a modulus is widening multiply: After a widening","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113922,"byte_end":113998,"line_start":416,"line_end":416,"column_start":1,"column_end":77}},{"value":"/ multiply by `range`, the result is in the high word. Then comparing the low","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":113999,"byte_end":114078,"line_start":417,"line_end":417,"column_start":1,"column_end":80}},{"value":"/ word against `zone` makes sure our distribution is uniform.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":114079,"byte_end":114142,"line_start":418,"line_end":418,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1923},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126438,"byte_end":126449,"line_start":730,"line_end":730,"column_start":12,"column_end":23},"name":"UniformChar","qualname":"::distributions::uniform::UniformChar","value":"UniformChar {  }","parent":null,"children":[{"krate":0,"index":1924}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `char`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `char`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":125880,"byte_end":125940,"line_start":719,"line_end":719,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":125941,"byte_end":125944,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":125945,"byte_end":126024,"line_start":721,"line_end":721,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126025,"byte_end":126082,"line_start":722,"line_end":722,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126083,"byte_end":126086,"line_start":723,"line_end":723,"column_start":1,"column_end":4}},{"value":"/ This differs from integer range sampling since the range `0xD800..=0xDFFF`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126087,"byte_end":126165,"line_start":724,"line_end":724,"column_start":1,"column_end":79}},{"value":"/ are used for surrogate pairs in UCS and UTF-16, and consequently are not","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126166,"byte_end":126242,"line_start":725,"line_end":725,"column_start":1,"column_end":77}},{"value":"/ valid Unicode code points. We must therefore avoid sampling values in this","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126243,"byte_end":126321,"line_start":726,"line_end":726,"column_start":1,"column_end":79}},{"value":"/ range.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126322,"byte_end":126332,"line_start":727,"line_end":727,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1930},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":129321,"byte_end":129333,"line_start":809,"line_end":809,"column_start":12,"column_end":24},"name":"UniformFloat","qualname":"::distributions::uniform::UniformFloat","value":"UniformFloat {  }","parent":null,"children":[{"krate":0,"index":1932},{"krate":0,"index":1933}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for floating-point types.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for floating-point types.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128331,"byte_end":128405,"line_start":788,"line_end":788,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128406,"byte_end":128409,"line_start":789,"line_end":789,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own type, this type","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128410,"byte_end":128489,"line_start":790,"line_end":790,"column_start":1,"column_end":80}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128490,"byte_end":128547,"line_start":791,"line_end":791,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128548,"byte_end":128551,"line_start":792,"line_end":792,"column_start":1,"column_end":4}},{"value":"/ # Implementation notes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128552,"byte_end":128578,"line_start":793,"line_end":793,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128579,"byte_end":128582,"line_start":794,"line_end":794,"column_start":1,"column_end":4}},{"value":"/ Instead of generating a float in the `[0, 1)` range using [`Standard`], the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128583,"byte_end":128662,"line_start":795,"line_end":795,"column_start":1,"column_end":80}},{"value":"/ `UniformFloat` implementation converts the output of an PRNG itself. This","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128663,"byte_end":128740,"line_start":796,"line_end":796,"column_start":1,"column_end":78}},{"value":"/ way one or two steps can be optimized out.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128741,"byte_end":128787,"line_start":797,"line_end":797,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128788,"byte_end":128791,"line_start":798,"line_end":798,"column_start":1,"column_end":4}},{"value":"/ The floats are first converted to a value in the `[1, 2)` interval using a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128792,"byte_end":128870,"line_start":799,"line_end":799,"column_start":1,"column_end":79}},{"value":"/ transmute-based method, and then mapped to the expected range with a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128871,"byte_end":128943,"line_start":800,"line_end":800,"column_start":1,"column_end":73}},{"value":"/ multiply and addition. Values produced this way have what equals 23 bits of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":128944,"byte_end":129023,"line_start":801,"line_end":801,"column_start":1,"column_end":80}},{"value":"/ random digits for an `f32`, and 52 for an `f64`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":129024,"byte_end":129076,"line_start":802,"line_end":802,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":129077,"byte_end":129080,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ [`new`]: UniformSampler::new","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":129081,"byte_end":129113,"line_start":804,"line_end":804,"column_start":1,"column_end":33}},{"value":"/ [`new_inclusive`]: UniformSampler::new_inclusive","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":129114,"byte_end":129166,"line_start":805,"line_end":805,"column_start":1,"column_end":53}},{"value":"/ [`Standard`]: crate::distributions::Standard","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":129167,"byte_end":129215,"line_start":806,"line_end":806,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1974},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138343,"byte_end":138358,"line_start":1022,"line_end":1022,"column_start":12,"column_end":27},"name":"UniformDuration","qualname":"::distributions::uniform::UniformDuration","value":"UniformDuration {  }","parent":null,"children":[{"krate":0,"index":1975},{"krate":0,"index":1976}],"decl_id":null,"docs":" The back-end implementing [`UniformSampler`] for `Duration`.","sig":null,"attributes":[{"value":"/ The back-end implementing [`UniformSampler`] for `Duration`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138030,"byte_end":138094,"line_start":1016,"line_end":1016,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138095,"byte_end":138098,"line_start":1017,"line_end":1017,"column_start":1,"column_end":4}},{"value":"/ Unless you are implementing [`UniformSampler`] for your own types, this type","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138099,"byte_end":138179,"line_start":1018,"line_end":1018,"column_start":1,"column_end":81}},{"value":"/ should not be used directly, use [`Uniform`] instead.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138180,"byte_end":138237,"line_start":1019,"line_end":1019,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weighted","qualname":"::distributions::weighted","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":470}],"decl_id":null,"docs":" Weighted index sampling","sig":null,"attributes":[{"value":"deprecated(since = \"0.8.0\", note =\n             \"use rand::distributions::{WeightedIndex, WeightedError} instead\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11358,"byte_end":11472,"line_start":111,"line_end":114,"column_start":1,"column_end":3}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11473,"byte_end":11498,"line_start":115,"line_end":115,"column_start":1,"column_end":26}},{"value":"/ Weighted index sampling","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161305,"byte_end":161332,"line_start":9,"line_end":9,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161333,"byte_end":161336,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module is deprecated. Use [`crate::distributions::WeightedIndex`] and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161337,"byte_end":161415,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ [`crate::distributions::WeightedError`] instead.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161416,"byte_end":161468,"line_start":12,"line_end":12,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161616,"byte_end":161628,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"name":"alias_method","qualname":"::distributions::weighted::alias_method","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":1997},{"krate":0,"index":2000},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161518,"byte_end":161540,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"deprecated(since = \"0.8.0\", note = \"moved to rand_distr crate\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161541,"byte_end":161607,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1997},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161897,"byte_end":161910,"line_start":26,"line_end":26,"column_start":16,"column_end":29},"name":"WeightedIndex","qualname":"::distributions::weighted::alias_method::WeightedIndex","value":"WeightedIndex {  }","parent":null,"children":[{"krate":0,"index":1999}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":162018,"byte_end":162021,"line_start":30,"line_end":30,"column_start":16,"column_end":19},"name":"new","qualname":"<WeightedIndex<W>>::new","value":"pub fn new(Vec<W>) -> Result<Self, WeightedError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":162143,"byte_end":162149,"line_start":35,"line_end":35,"column_start":15,"column_end":21},"name":"Weight","qualname":"::distributions::weighted::alias_method::Weight","value":"Weight","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15760,"byte_end":15768,"line_start":218,"line_end":218,"column_start":12,"column_end":20},"name":"Standard","qualname":"::distributions::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A generic random value distribution, implemented for many primitive types.\n Usually generates values with a numerically uniform distribution, and with a\n range appropriate to the type.","sig":null,"attributes":[{"value":"/ A generic random value distribution, implemented for many primitive types.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12029,"byte_end":12107,"line_start":134,"line_end":134,"column_start":1,"column_end":79}},{"value":"/ Usually generates values with a numerically uniform distribution, and with a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12108,"byte_end":12188,"line_start":135,"line_end":135,"column_start":1,"column_end":81}},{"value":"/ range appropriate to the type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12189,"byte_end":12223,"line_start":136,"line_end":136,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12224,"byte_end":12227,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ## Provided implementations","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12228,"byte_end":12259,"line_start":138,"line_end":138,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12260,"byte_end":12263,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ Assuming the provided `Rng` is well-behaved, these implementations","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12264,"byte_end":12334,"line_start":140,"line_end":140,"column_start":1,"column_end":71}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12335,"byte_end":12399,"line_start":141,"line_end":141,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12400,"byte_end":12403,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12404,"byte_end":12480,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12481,"byte_end":12515,"line_start":144,"line_end":144,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12516,"byte_end":12592,"line_start":145,"line_end":145,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12593,"byte_end":12661,"line_start":146,"line_end":146,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12662,"byte_end":12728,"line_start":147,"line_end":147,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12729,"byte_end":12767,"line_start":148,"line_end":148,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12768,"byte_end":12837,"line_start":149,"line_end":149,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12838,"byte_end":12912,"line_start":150,"line_end":150,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12913,"byte_end":12961,"line_start":151,"line_end":151,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":12962,"byte_end":13038,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13039,"byte_end":13069,"line_start":153,"line_end":153,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13070,"byte_end":13073,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ The `Standard` distribution also supports generation of the following","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13074,"byte_end":13147,"line_start":155,"line_end":155,"column_start":1,"column_end":74}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13148,"byte_end":13207,"line_start":156,"line_end":156,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13208,"byte_end":13211,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13212,"byte_end":13287,"line_start":158,"line_end":158,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13288,"byte_end":13363,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13364,"byte_end":13444,"line_start":160,"line_end":160,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13445,"byte_end":13510,"line_start":161,"line_end":161,"column_start":1,"column_end":66}},{"value":"/     When using `rustc` ≥ 1.51, enable the `min_const_gen` feature to support","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13511,"byte_end":13593,"line_start":162,"line_end":162,"column_start":1,"column_end":81}},{"value":"/     arrays larger than 32 elements.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13594,"byte_end":13633,"line_start":163,"line_end":163,"column_start":1,"column_end":40}},{"value":"/     Note that [`Rng::fill`] and `Standard`'s array support are *not* equivalent:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13634,"byte_end":13718,"line_start":164,"line_end":164,"column_start":1,"column_end":85}},{"value":"/     the former is optimised for integer types (using fewer RNG calls for","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13719,"byte_end":13795,"line_start":165,"line_end":165,"column_start":1,"column_end":77}},{"value":"/     element types smaller than the RNG word size), while the latter supports","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13796,"byte_end":13876,"line_start":166,"line_end":166,"column_start":1,"column_end":81}},{"value":"/     any element type supported by `Standard`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13877,"byte_end":13926,"line_start":167,"line_end":167,"column_start":1,"column_end":50}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":13927,"byte_end":14006,"line_start":168,"line_end":168,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14007,"byte_end":14074,"line_start":169,"line_end":169,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14075,"byte_end":14078,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ ## Custom implementations","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14079,"byte_end":14108,"line_start":171,"line_end":171,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14109,"byte_end":14112,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ The [`Standard`] distribution may be implemented for user types as follows:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14113,"byte_end":14192,"line_start":173,"line_end":173,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14193,"byte_end":14196,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14197,"byte_end":14204,"line_start":175,"line_end":175,"column_start":1,"column_end":8}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14205,"byte_end":14231,"line_start":176,"line_end":176,"column_start":1,"column_end":27}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14232,"byte_end":14250,"line_start":177,"line_end":177,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{Distribution, Standard};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14251,"byte_end":14305,"line_start":178,"line_end":178,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14306,"byte_end":14309,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ struct MyF32 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14310,"byte_end":14328,"line_start":180,"line_end":180,"column_start":1,"column_end":19}},{"value":"/     x: f32,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14329,"byte_end":14344,"line_start":181,"line_end":181,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14345,"byte_end":14350,"line_start":182,"line_end":182,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14351,"byte_end":14354,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ impl Distribution<MyF32> for Standard {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14355,"byte_end":14398,"line_start":184,"line_end":184,"column_start":1,"column_end":44}},{"value":"/     fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> MyF32 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14399,"byte_end":14464,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"/         MyF32 { x: rng.gen() }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14465,"byte_end":14499,"line_start":186,"line_end":186,"column_start":1,"column_end":35}},{"value":"/     }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14500,"byte_end":14509,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14510,"byte_end":14515,"line_start":188,"line_end":188,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14516,"byte_end":14523,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14524,"byte_end":14527,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ## Example usage","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14528,"byte_end":14548,"line_start":191,"line_end":191,"column_start":1,"column_end":21}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14549,"byte_end":14556,"line_start":192,"line_end":192,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14557,"byte_end":14582,"line_start":193,"line_end":193,"column_start":1,"column_end":26}},{"value":"/ use rand::distributions::Standard;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14583,"byte_end":14621,"line_start":194,"line_end":194,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14622,"byte_end":14625,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ let val: f32 = StdRng::from_entropy().sample(Standard);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14626,"byte_end":14685,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"/ println!(\"f32 from [0, 1): {}\", val);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14686,"byte_end":14727,"line_start":197,"line_end":197,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14728,"byte_end":14735,"line_start":198,"line_end":198,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14736,"byte_end":14739,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ # Floating point implementation","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14740,"byte_end":14775,"line_start":200,"line_end":200,"column_start":1,"column_end":36}},{"value":"/ The floating point implementations for `Standard` generate a random value in","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14776,"byte_end":14856,"line_start":201,"line_end":201,"column_start":1,"column_end":81}},{"value":"/ the half-open interval `[0, 1)`, i.e. including 0 but not 1.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14857,"byte_end":14921,"line_start":202,"line_end":202,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14922,"byte_end":14925,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ All values that can be generated are of the form `n * ε/2`. For `f32`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":14926,"byte_end":15000,"line_start":204,"line_end":204,"column_start":1,"column_end":74}},{"value":"/ the 24 most significant random bits of a `u32` are used and for `f64` the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15001,"byte_end":15078,"line_start":205,"line_end":205,"column_start":1,"column_end":78}},{"value":"/ 53 most significant bits of a `u64` are used. The conversion uses the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15079,"byte_end":15152,"line_start":206,"line_end":206,"column_start":1,"column_end":74}},{"value":"/ multiplicative method: `(rng.gen::<$uty>() >> N) as $ty * (ε/2)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15153,"byte_end":15223,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15224,"byte_end":15227,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ See also: [`Open01`] which samples from `(0, 1)`, [`OpenClosed01`] which","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15228,"byte_end":15304,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ samples from `(0, 1]` and `Rng::gen_range(0..1)` which also samples from","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15305,"byte_end":15381,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"/ `[0, 1)`. Note that `Open01` uses transmute-based methods which yield 1 bit","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15382,"byte_end":15461,"line_start":211,"line_end":211,"column_start":1,"column_end":80}},{"value":"/ less precision but may perform faster on some architectures (on modern Intel","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15462,"byte_end":15542,"line_start":212,"line_end":212,"column_start":1,"column_end":81}},{"value":"/ CPUs all methods have approximately equal performance).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15543,"byte_end":15602,"line_start":213,"line_end":213,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15603,"byte_end":15606,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ [`Uniform`]: uniform::Uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":15607,"byte_end":15640,"line_start":215,"line_end":215,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":531},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565}],"decl_id":null,"docs":" Convenience re-export of common members","sig":null,"attributes":[{"value":"/ Convenience re-export of common members","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":162842,"byte_end":162885,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":162886,"byte_end":162889,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Like the standard library's prelude, this module simplifies importing of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":162890,"byte_end":162966,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ common items. Unlike the standard prelude, the contents of this module must","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":162967,"byte_end":163046,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ be imported manually:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163047,"byte_end":163072,"line_start":13,"line_end":13,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163073,"byte_end":163076,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163077,"byte_end":163084,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163085,"byte_end":163110,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ # let mut r = StdRng::from_rng(thread_rng()).unwrap();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163111,"byte_end":163169,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/ # let _: f32 = r.gen();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163170,"byte_end":163197,"line_start":18,"line_end":18,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\prelude.rs","byte_start":163198,"byte_end":163205,"line_start":19,"line_end":19,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":603},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165935,"byte_end":165938,"line_start":55,"line_end":55,"column_start":11,"column_end":14},"name":"Rng","qualname":"::rng::Rng","value":"Rng: RngCore","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":621}],"decl_id":null,"docs":" An automatically-implemented extension trait on [`RngCore`] providing high-level\n generic methods for sampling values and other convenience methods.","sig":null,"attributes":[{"value":"/ An automatically-implemented extension trait on [`RngCore`] providing high-level","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164404,"byte_end":164488,"line_start":18,"line_end":18,"column_start":1,"column_end":85}},{"value":"/ generic methods for sampling values and other convenience methods.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164489,"byte_end":164559,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164560,"byte_end":164563,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This is the primary trait to use when generating random values.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164564,"byte_end":164631,"line_start":21,"line_end":21,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164632,"byte_end":164635,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Generic usage","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164636,"byte_end":164655,"line_start":23,"line_end":23,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164656,"byte_end":164659,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The basic pattern is `fn foo<R: Rng + ?Sized>(rng: &mut R)`. Some","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164660,"byte_end":164729,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ things are worth noting here:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164730,"byte_end":164763,"line_start":26,"line_end":26,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164764,"byte_end":164767,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Since `Rng: RngCore` and every `RngCore` implements `Rng`, it makes no","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164768,"byte_end":164844,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/   difference whether we use `R: Rng` or `R: RngCore`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164845,"byte_end":164902,"line_start":29,"line_end":29,"column_start":1,"column_end":58}},{"value":"/ - The `+ ?Sized` un-bounding allows functions to be called directly on","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164903,"byte_end":164977,"line_start":30,"line_end":30,"column_start":1,"column_end":75}},{"value":"/   type-erased references; i.e. `foo(r)` where `r: &mut dyn RngCore`. Without","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":164978,"byte_end":165058,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/   this it would be necessary to write `foo(&mut r)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165059,"byte_end":165115,"line_start":32,"line_end":32,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165116,"byte_end":165119,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ An alternative pattern is possible: `fn foo<R: Rng>(rng: R)`. This has some","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165120,"byte_end":165199,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ trade-offs. It allows the argument to be consumed directly without a `&mut`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165200,"byte_end":165279,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ (which is how `from_rng(thread_rng())` works); also it still works directly","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165280,"byte_end":165359,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"/ on references (including type-erased references). Unfortunately within the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165360,"byte_end":165438,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ function `foo` it is not known whether `rng` is a reference type or not,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165439,"byte_end":165515,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ hence many uses of `rng` require an extra reference, either explicitly","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165516,"byte_end":165590,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ (`distr.sample(&mut rng)`) or implicitly (`rng.gen()`); one may hope the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165591,"byte_end":165667,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/ optimiser can remove redundant references later.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165668,"byte_end":165720,"line_start":41,"line_end":41,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165721,"byte_end":165724,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Example:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165725,"byte_end":165737,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165738,"byte_end":165741,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165742,"byte_end":165749,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # use rand::thread_rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165750,"byte_end":165777,"line_start":46,"line_end":46,"column_start":1,"column_end":28}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165778,"byte_end":165796,"line_start":47,"line_end":47,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165797,"byte_end":165800,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ fn foo<R: Rng + ?Sized>(rng: &mut R) -> f32 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165801,"byte_end":165850,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/     rng.gen()","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165851,"byte_end":165868,"line_start":50,"line_end":50,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165869,"byte_end":165874,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165875,"byte_end":165878,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # let v = foo(&mut thread_rng());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165879,"byte_end":165916,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165917,"byte_end":165924,"line_start":54,"line_end":54,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167211,"byte_end":167214,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"gen","qualname":"::rng::Rng::gen","value":"pub fn gen<T>(&mut Self) -> T where Standard: Distribution<T>","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Return a random value supporting the [`Standard`] distribution.","sig":null,"attributes":[{"value":"/ Return a random value supporting the [`Standard`] distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165954,"byte_end":166021,"line_start":56,"line_end":56,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166026,"byte_end":166029,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166034,"byte_end":166047,"line_start":58,"line_end":58,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166052,"byte_end":166055,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166060,"byte_end":166067,"line_start":60,"line_end":60,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166072,"byte_end":166104,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166109,"byte_end":166112,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166117,"byte_end":166148,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166153,"byte_end":166180,"line_start":64,"line_end":64,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166185,"byte_end":166207,"line_start":65,"line_end":65,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166212,"byte_end":166259,"line_start":66,"line_end":66,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166264,"byte_end":166271,"line_start":67,"line_end":67,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166276,"byte_end":166279,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ # Arrays and tuples","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166284,"byte_end":166307,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166312,"byte_end":166315,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ The `rng.gen()` method is able to generate arrays (up to 32 elements)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166320,"byte_end":166393,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ and tuples (up to 12 elements), so long as all element types can be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166398,"byte_end":166469,"line_start":72,"line_end":72,"column_start":5,"column_end":76}},{"value":"/ generated.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166474,"byte_end":166488,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/ When using `rustc` ≥ 1.51, enable the `min_const_gen` feature to support","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166493,"byte_end":166571,"line_start":74,"line_end":74,"column_start":5,"column_end":81}},{"value":"/ arrays larger than 32 elements.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166576,"byte_end":166611,"line_start":75,"line_end":75,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166616,"byte_end":166619,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ For arrays of integers, especially for those with small element types","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166624,"byte_end":166697,"line_start":77,"line_end":77,"column_start":5,"column_end":78}},{"value":"/ (< 64 bit), it will likely be faster to instead use [`Rng::fill`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166702,"byte_end":166772,"line_start":78,"line_end":78,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166777,"byte_end":166780,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166785,"byte_end":166792,"line_start":80,"line_end":80,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166797,"byte_end":166829,"line_start":81,"line_end":81,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166834,"byte_end":166837,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166842,"byte_end":166873,"line_start":83,"line_end":83,"column_start":5,"column_end":36}},{"value":"/ let tuple: (u8, i32, char) = rng.gen(); // arbitrary tuple support","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166878,"byte_end":166948,"line_start":84,"line_end":84,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166953,"byte_end":166956,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ let arr1: [f32; 32] = rng.gen();        // array construction","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":166961,"byte_end":167026,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/ let mut arr2 = [0u8; 128];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167031,"byte_end":167061,"line_start":87,"line_end":87,"column_start":5,"column_end":35}},{"value":"/ rng.fill(&mut arr2);                    // array fill","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167066,"byte_end":167123,"line_start":88,"line_end":88,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167128,"byte_end":167135,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167140,"byte_end":167143,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167148,"byte_end":167189,"line_start":91,"line_end":91,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167194,"byte_end":167203,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168249,"byte_end":168258,"line_start":129,"line_end":129,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::rng::Rng::gen_range","value":"pub fn gen_range<T, R>(&mut Self, R) -> T where T: SampleUniform,\nR: SampleRange<T>","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Generate a random value in the given range.","sig":null,"attributes":[{"value":"/ Generate a random value in the given range.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167313,"byte_end":167360,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167365,"byte_end":167368,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This function is optimised for the case that only a single sample is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167373,"byte_end":167445,"line_start":100,"line_end":100,"column_start":5,"column_end":77}},{"value":"/ made from the given range. See also the [`Uniform`] distribution","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167450,"byte_end":167518,"line_start":101,"line_end":101,"column_start":5,"column_end":73}},{"value":"/ type which may be faster if sampling from the same range repeatedly.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167523,"byte_end":167595,"line_start":102,"line_end":102,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167600,"byte_end":167603,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Only `gen_range(low..high)` and `gen_range(low..=high)` are supported.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167608,"byte_end":167682,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167687,"byte_end":167690,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167695,"byte_end":167707,"line_start":106,"line_end":106,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167712,"byte_end":167715,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Panics if the range is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167720,"byte_end":167753,"line_start":108,"line_end":108,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167758,"byte_end":167761,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167766,"byte_end":167779,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167784,"byte_end":167787,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167792,"byte_end":167799,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167804,"byte_end":167836,"line_start":113,"line_end":113,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167841,"byte_end":167844,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167849,"byte_end":167880,"line_start":115,"line_end":115,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167885,"byte_end":167888,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ // Exclusive range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167893,"byte_end":167915,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..10);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167920,"byte_end":167958,"line_start":118,"line_end":118,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167963,"byte_end":167985,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0..1.3e5);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":167990,"byte_end":168035,"line_start":120,"line_end":120,"column_start":5,"column_end":50}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168040,"byte_end":168062,"line_start":121,"line_end":121,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168067,"byte_end":168070,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ // Inclusive range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168075,"byte_end":168097,"line_start":123,"line_end":123,"column_start":5,"column_end":27}},{"value":"/ let n: u32 = rng.gen_range(0..=10);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168102,"byte_end":168141,"line_start":124,"line_end":124,"column_start":5,"column_end":44}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168146,"byte_end":168168,"line_start":125,"line_end":125,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168173,"byte_end":168180,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168185,"byte_end":168188,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ [`Uniform`]: distributions::uniform::Uniform","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168193,"byte_end":168241,"line_start":128,"line_end":128,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168945,"byte_end":168951,"line_start":152,"line_end":152,"column_start":8,"column_end":14},"name":"sample","qualname":"::rng::Rng::sample","value":"pub fn sample<T, D: Distribution<T>>(&mut Self, D) -> T","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Sample a new value, using the given distribution.","sig":null,"attributes":[{"value":"/ Sample a new value, using the given distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168469,"byte_end":168522,"line_start":138,"line_end":138,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168527,"byte_end":168530,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ### Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168535,"byte_end":168550,"line_start":140,"line_end":140,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168555,"byte_end":168558,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168563,"byte_end":168570,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168575,"byte_end":168607,"line_start":143,"line_end":143,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::Uniform;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168612,"byte_end":168649,"line_start":144,"line_end":144,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168654,"byte_end":168657,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168662,"byte_end":168693,"line_start":146,"line_end":146,"column_start":5,"column_end":36}},{"value":"/ let x = rng.sample(Uniform::new(10u32, 15));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168698,"byte_end":168746,"line_start":147,"line_end":147,"column_start":5,"column_end":53}},{"value":"/ // Type annotation requires two types, the type and distribution; the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168751,"byte_end":168824,"line_start":148,"line_end":148,"column_start":5,"column_end":78}},{"value":"/ // distribution can be inferred.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168829,"byte_end":168865,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ let y = rng.sample::<u16, _>(Uniform::new(10, 15));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168870,"byte_end":168925,"line_start":150,"line_end":150,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":168930,"byte_end":168937,"line_start":151,"line_end":151,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170352,"byte_end":170363,"line_start":192,"line_end":192,"column_start":8,"column_end":19},"name":"sample_iter","qualname":"::rng::Rng::sample_iter","value":"pub fn sample_iter<T, D>(Self, D) -> distributions::DistIter<D, Self, T> where\nD: Distribution<T>, Self: Sized","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Create an iterator that generates values using the given distribution.","sig":null,"attributes":[{"value":"/ Create an iterator that generates values using the given distribution.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169041,"byte_end":169115,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169120,"byte_end":169123,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Note that this function takes its arguments by value. This works since","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169128,"byte_end":169202,"line_start":158,"line_end":158,"column_start":5,"column_end":79}},{"value":"/ `(&mut R): Rng where R: Rng` and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169207,"byte_end":169243,"line_start":159,"line_end":159,"column_start":5,"column_end":41}},{"value":"/ `(&D): Distribution where D: Distribution`,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169248,"byte_end":169295,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/ however borrowing is not automatic hence `rng.sample_iter(...)` may","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169300,"byte_end":169371,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/ need to be replaced with `(&mut rng).sample_iter(...)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169376,"byte_end":169435,"line_start":162,"line_end":162,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169440,"byte_end":169443,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169448,"byte_end":169461,"line_start":164,"line_end":164,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169466,"byte_end":169469,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169474,"byte_end":169481,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169486,"byte_end":169518,"line_start":167,"line_end":167,"column_start":5,"column_end":37}},{"value":"/ use rand::distributions::{Alphanumeric, Uniform, Standard};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169523,"byte_end":169586,"line_start":168,"line_end":168,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169591,"byte_end":169594,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169599,"byte_end":169630,"line_start":170,"line_end":170,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169635,"byte_end":169638,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ // Vec of 16 x f32:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169643,"byte_end":169666,"line_start":172,"line_end":172,"column_start":5,"column_end":28}},{"value":"/ let v: Vec<f32> = (&mut rng).sample_iter(Standard).take(16).collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169671,"byte_end":169745,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169750,"byte_end":169753,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ // String:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169758,"byte_end":169772,"line_start":175,"line_end":175,"column_start":5,"column_end":19}},{"value":"/ let s: String = (&mut rng).sample_iter(Alphanumeric)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169777,"byte_end":169833,"line_start":176,"line_end":176,"column_start":5,"column_end":61}},{"value":"/     .take(7)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169838,"byte_end":169854,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/     .map(char::from)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169859,"byte_end":169883,"line_start":178,"line_end":178,"column_start":5,"column_end":29}},{"value":"/     .collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169888,"byte_end":169907,"line_start":179,"line_end":179,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169912,"byte_end":169915,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ // Combined values","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169920,"byte_end":169942,"line_start":181,"line_end":181,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", (&mut rng).sample_iter(Standard).take(5)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":169947,"byte_end":170008,"line_start":182,"line_end":182,"column_start":5,"column_end":66}},{"value":"/                              .collect::<Vec<(f64, bool)>>());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170013,"byte_end":170078,"line_start":183,"line_end":183,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170083,"byte_end":170086,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ // Dice-rolling:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170091,"byte_end":170111,"line_start":185,"line_end":185,"column_start":5,"column_end":25}},{"value":"/ let die_range = Uniform::new_inclusive(1, 6);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170116,"byte_end":170165,"line_start":186,"line_end":186,"column_start":5,"column_end":54}},{"value":"/ let mut roll_die = (&mut rng).sample_iter(die_range);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170170,"byte_end":170227,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/ while roll_die.next().unwrap() != 6 {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170232,"byte_end":170273,"line_start":188,"line_end":188,"column_start":5,"column_end":46}},{"value":"/     println!(\"Not a 6; rolling again!\");","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170278,"byte_end":170322,"line_start":189,"line_end":189,"column_start":5,"column_end":49}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170327,"byte_end":170332,"line_start":190,"line_end":190,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170337,"byte_end":170344,"line_start":191,"line_end":191,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171097,"byte_end":171101,"line_start":218,"line_end":218,"column_start":8,"column_end":12},"name":"fill","qualname":"::rng::Rng::fill","value":"pub fn fill<T: Fill + ?Sized>(&mut Self, &mut T)","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170533,"byte_end":170589,"line_start":200,"line_end":200,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170594,"byte_end":170597,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170602,"byte_end":170675,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170680,"byte_end":170742,"line_start":203,"line_end":203,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170747,"byte_end":170750,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`try_fill`] except that it panics on error.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170755,"byte_end":170824,"line_start":205,"line_end":205,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170829,"byte_end":170832,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170837,"byte_end":170850,"line_start":207,"line_end":207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170855,"byte_end":170858,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170863,"byte_end":170870,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170875,"byte_end":170907,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170912,"byte_end":170915,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let mut arr = [0i8; 20];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170920,"byte_end":170948,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/ thread_rng().fill(&mut arr[..]);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170953,"byte_end":170989,"line_start":213,"line_end":213,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":170994,"byte_end":171001,"line_start":214,"line_end":214,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171006,"byte_end":171009,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ [`fill_bytes`]: RngCore::fill_bytes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171014,"byte_end":171053,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ [`try_fill`]: Rng::try_fill","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171058,"byte_end":171089,"line_start":217,"line_end":217,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171941,"byte_end":171949,"line_start":246,"line_end":246,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Rng::try_fill","value":"pub fn try_fill<T: Fill + ?Sized>(&mut Self, &mut T) -> Result<(), Error>","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Fill any type implementing [`Fill`] with random data","sig":null,"attributes":[{"value":"/ Fill any type implementing [`Fill`] with random data","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171233,"byte_end":171289,"line_start":222,"line_end":222,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171294,"byte_end":171297,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ The distribution is expected to be uniform with portable results, but","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171302,"byte_end":171375,"line_start":224,"line_end":224,"column_start":5,"column_end":78}},{"value":"/ this cannot be guaranteed for third-party implementations.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171380,"byte_end":171442,"line_start":225,"line_end":225,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171447,"byte_end":171450,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This is identical to [`fill`] except that it forwards errors.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171455,"byte_end":171520,"line_start":227,"line_end":227,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171525,"byte_end":171528,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171533,"byte_end":171546,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171551,"byte_end":171554,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171559,"byte_end":171566,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ # use rand::Error;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171571,"byte_end":171593,"line_start":232,"line_end":232,"column_start":5,"column_end":27}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171598,"byte_end":171630,"line_start":233,"line_end":233,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171635,"byte_end":171638,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # fn try_inner() -> Result<(), Error> {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171643,"byte_end":171686,"line_start":235,"line_end":235,"column_start":5,"column_end":48}},{"value":"/ let mut arr = [0u64; 4];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171691,"byte_end":171719,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/ thread_rng().try_fill(&mut arr[..])?;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171724,"byte_end":171765,"line_start":237,"line_end":237,"column_start":5,"column_end":46}},{"value":"/ # Ok(())","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171770,"byte_end":171782,"line_start":238,"line_end":238,"column_start":5,"column_end":17}},{"value":"/ # }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171787,"byte_end":171794,"line_start":239,"line_end":239,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171799,"byte_end":171802,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # try_inner().unwrap()","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171807,"byte_end":171833,"line_start":241,"line_end":241,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171838,"byte_end":171845,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171850,"byte_end":171853,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171858,"byte_end":171905,"line_start":244,"line_end":244,"column_start":5,"column_end":52}},{"value":"/ [`fill`]: Rng::fill","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":171910,"byte_end":171933,"line_start":245,"line_end":245,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172575,"byte_end":172583,"line_start":270,"line_end":270,"column_start":8,"column_end":16},"name":"gen_bool","qualname":"::rng::Rng::gen_bool","value":"pub fn gen_bool(&mut Self, f64) -> bool","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Return a bool with a probability `p` of being true.","sig":null,"attributes":[{"value":"/ Return a bool with a probability `p` of being true.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172055,"byte_end":172110,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172115,"byte_end":172118,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172123,"byte_end":172190,"line_start":252,"line_end":252,"column_start":5,"column_end":72}},{"value":"/ sampling from the same probability repeatedly.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172195,"byte_end":172245,"line_start":253,"line_end":253,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172250,"byte_end":172253,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172258,"byte_end":172271,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172276,"byte_end":172279,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172284,"byte_end":172291,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172296,"byte_end":172328,"line_start":258,"line_end":258,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172333,"byte_end":172336,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172341,"byte_end":172372,"line_start":260,"line_end":260,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_bool(1.0 / 3.0));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172377,"byte_end":172421,"line_start":261,"line_end":261,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172426,"byte_end":172433,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172438,"byte_end":172441,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172446,"byte_end":172458,"line_start":264,"line_end":264,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172463,"byte_end":172466,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ If `p < 0` or `p > 1`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172471,"byte_end":172497,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172502,"byte_end":172505,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172510,"byte_end":172553,"line_start":268,"line_end":268,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172558,"byte_end":172567,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173559,"byte_end":173568,"line_start":299,"line_end":299,"column_start":8,"column_end":17},"name":"gen_ratio","qualname":"::rng::Rng::gen_ratio","value":"pub fn gen_ratio(&mut Self, u32, u32) -> bool","parent":{"krate":0,"index":603},"children":[],"decl_id":null,"docs":" Return a bool with a probability of `numerator/denominator` of being\n true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n returning true. If `numerator == denominator`, then the returned value\n is guaranteed to be `true`. If `numerator == 0`, then the returned\n value is guaranteed to be `false`.","sig":null,"attributes":[{"value":"/ Return a bool with a probability of `numerator/denominator` of being","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172706,"byte_end":172778,"line_start":275,"line_end":275,"column_start":5,"column_end":77}},{"value":"/ true. I.e. `gen_ratio(2, 3)` has chance of 2 in 3, or about 67%, of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172783,"byte_end":172854,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/ returning true. If `numerator == denominator`, then the returned value","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172859,"byte_end":172933,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ is guaranteed to be `true`. If `numerator == 0`, then the returned","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":172938,"byte_end":173008,"line_start":278,"line_end":278,"column_start":5,"column_end":75}},{"value":"/ value is guaranteed to be `false`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173013,"byte_end":173051,"line_start":279,"line_end":279,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173056,"byte_end":173059,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ See also the [`Bernoulli`] distribution, which may be faster if","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173064,"byte_end":173131,"line_start":281,"line_end":281,"column_start":5,"column_end":72}},{"value":"/ sampling from the same `numerator` and `denominator` repeatedly.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173136,"byte_end":173204,"line_start":282,"line_end":282,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173209,"byte_end":173212,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173217,"byte_end":173229,"line_start":284,"line_end":284,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173234,"byte_end":173237,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ If `denominator == 0` or `numerator > denominator`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173242,"byte_end":173297,"line_start":286,"line_end":286,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173302,"byte_end":173305,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173310,"byte_end":173323,"line_start":288,"line_end":288,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173328,"byte_end":173331,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173336,"byte_end":173343,"line_start":290,"line_end":290,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173348,"byte_end":173380,"line_start":291,"line_end":291,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173385,"byte_end":173388,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173393,"byte_end":173424,"line_start":293,"line_end":293,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_ratio(2, 3));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173429,"byte_end":173469,"line_start":294,"line_end":294,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173474,"byte_end":173481,"line_start":295,"line_end":295,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173486,"byte_end":173489,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ [`Bernoulli`]: distributions::Bernoulli","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173494,"byte_end":173537,"line_start":297,"line_end":297,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173542,"byte_end":173551,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":624},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":174117,"byte_end":174121,"line_start":314,"line_end":314,"column_start":11,"column_end":15},"name":"Fill","qualname":"::rng::Fill","value":"Fill","parent":null,"children":[{"krate":0,"index":625}],"decl_id":null,"docs":" Types which may be filled with random data","sig":null,"attributes":[{"value":"/ Types which may be filled with random data","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173783,"byte_end":173829,"line_start":307,"line_end":307,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173830,"byte_end":173833,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"/ This trait allows arrays to be efficiently filled with random data.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173834,"byte_end":173905,"line_start":309,"line_end":309,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173906,"byte_end":173909,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ Implementations are expected to be portable across machines unless","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173910,"byte_end":173980,"line_start":311,"line_end":311,"column_start":1,"column_end":71}},{"value":"/ clearly documented otherwise (see the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173981,"byte_end":174022,"line_start":312,"line_end":312,"column_start":1,"column_end":42}},{"value":"/ [Chapter on Portability](https://rust-random.github.io/book/portability.html)).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":174023,"byte_end":174106,"line_start":313,"line_end":313,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":174166,"byte_end":174174,"line_start":316,"line_end":316,"column_start":8,"column_end":16},"name":"try_fill","qualname":"::rng::Fill::try_fill","value":"pub fn try_fill<R: Rng + ?Sized>(&mut Self, &mut R) -> Result<(), Error>","parent":{"krate":0,"index":624},"children":[],"decl_id":null,"docs":" Fill self with random data\n","sig":null,"attributes":[{"value":"/ Fill self with random data","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":174128,"byte_end":174158,"line_start":315,"line_end":315,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":633},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rngs","qualname":"::rngs","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":747},{"krate":0,"index":765},{"krate":0,"index":796},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":846}],"decl_id":null,"docs":" Random number generators and adapters","sig":null,"attributes":[{"value":"/ Random number generators and adapters","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183082,"byte_end":183123,"line_start":9,"line_end":9,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183124,"byte_end":183127,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Background: Random number generators (RNGs)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183128,"byte_end":183178,"line_start":11,"line_end":11,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183179,"byte_end":183182,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Computers cannot produce random numbers from nowhere. We classify","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183183,"byte_end":183252,"line_start":13,"line_end":13,"column_start":1,"column_end":70}},{"value":"/ random number generators as follows:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183253,"byte_end":183293,"line_start":14,"line_end":14,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183294,"byte_end":183297,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ -   \"True\" random number generators (TRNGs) use hard-to-predict data sources","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183298,"byte_end":183378,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/     (e.g. the high-resolution parts of event timings and sensor jitter) to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183379,"byte_end":183457,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/     harvest random bit-sequences, apply algorithms to remove bias and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183458,"byte_end":183531,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/     estimate available entropy, then combine these bits into a byte-sequence","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183532,"byte_end":183612,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/     or an entropy pool. This job is usually done by the operating system or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183613,"byte_end":183692,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/     a hardware generator (HRNG).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183693,"byte_end":183729,"line_start":21,"line_end":21,"column_start":1,"column_end":37}},{"value":"/ -   \"Pseudo\"-random number generators (PRNGs) use algorithms to transform a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183730,"byte_end":183809,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/     seed into a sequence of pseudo-random numbers. These generators can be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183810,"byte_end":183888,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/     fast and produce well-distributed unpredictable random numbers (or not).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183889,"byte_end":183969,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     They are usually deterministic: given algorithm and seed, the output","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":183970,"byte_end":184046,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/     sequence can be reproduced. They have finite period and eventually loop;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184047,"byte_end":184127,"line_start":26,"line_end":26,"column_start":1,"column_end":81}},{"value":"/     with many algorithms this period is fixed and can be proven sufficiently","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184128,"byte_end":184208,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/     long, while others are chaotic and the period depends on the seed.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184209,"byte_end":184283,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/ -   \"Cryptographically secure\" pseudo-random number generators (CSPRNGs)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184284,"byte_end":184360,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/     are the sub-set of PRNGs which are secure. Security of the generator","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184361,"byte_end":184437,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/     relies both on hiding the internal state and using a strong algorithm.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184438,"byte_end":184516,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184517,"byte_end":184520,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Traits and functionality","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184521,"byte_end":184552,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184553,"byte_end":184556,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ All RNGs implement the [`RngCore`] trait, as a consequence of which the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184557,"byte_end":184632,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ [`Rng`] extension trait is automatically implemented. Secure RNGs may","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184633,"byte_end":184706,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ additionally implement the [`CryptoRng`] trait.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184707,"byte_end":184758,"line_start":37,"line_end":37,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184759,"byte_end":184762,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ All PRNGs require a seed to produce their random number sequence. The","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184763,"byte_end":184836,"line_start":39,"line_end":39,"column_start":1,"column_end":74}},{"value":"/ [`SeedableRng`] trait provides three ways of constructing PRNGs:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184837,"byte_end":184905,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184906,"byte_end":184909,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ -   `from_seed` accepts a type specific to the PRNG","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184910,"byte_end":184965,"line_start":42,"line_end":42,"column_start":1,"column_end":56}},{"value":"/ -   `from_rng` allows a PRNG to be seeded from any other RNG","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":184966,"byte_end":185030,"line_start":43,"line_end":43,"column_start":1,"column_end":65}},{"value":"/ -   `seed_from_u64` allows any PRNG to be seeded from a `u64` insecurely","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185031,"byte_end":185107,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ -   `from_entropy` securely seeds a PRNG from fresh entropy","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185108,"byte_end":185171,"line_start":45,"line_end":45,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185172,"byte_end":185175,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Use the [`rand_core`] crate when implementing your own RNGs.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185176,"byte_end":185240,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185241,"byte_end":185244,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ## Our generators","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185245,"byte_end":185266,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185267,"byte_end":185270,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This crate provides several random number generators:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185271,"byte_end":185328,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185329,"byte_end":185332,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ -   [`OsRng`] is an interface to the operating system's random number","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185333,"byte_end":185406,"line_start":53,"line_end":53,"column_start":1,"column_end":74}},{"value":"/     source. Typically the operating system uses a CSPRNG with entropy","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185407,"byte_end":185480,"line_start":54,"line_end":54,"column_start":1,"column_end":74}},{"value":"/     provided by a TRNG and some type of on-going re-seeding.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185481,"byte_end":185545,"line_start":55,"line_end":55,"column_start":1,"column_end":65}},{"value":"/ -   [`ThreadRng`], provided by the [`thread_rng`] function, is a handle to a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185546,"byte_end":185626,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     thread-local CSPRNG with periodic seeding from [`OsRng`]. Because this","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185627,"byte_end":185705,"line_start":57,"line_end":57,"column_start":1,"column_end":79}},{"value":"/     is local, it is typically much faster than [`OsRng`]. It should be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185706,"byte_end":185780,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/     secure, though the paranoid may prefer [`OsRng`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185781,"byte_end":185838,"line_start":59,"line_end":59,"column_start":1,"column_end":58}},{"value":"/ -   [`StdRng`] is a CSPRNG chosen for good performance and trust of security","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185839,"byte_end":185919,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/     (based on reviews, maturity and usage). The current algorithm is ChaCha12,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":185920,"byte_end":186002,"line_start":61,"line_end":61,"column_start":1,"column_end":83}},{"value":"/     which is well established and rigorously analysed.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186003,"byte_end":186061,"line_start":62,"line_end":62,"column_start":1,"column_end":59}},{"value":"/     [`StdRng`] provides the algorithm used by [`ThreadRng`] but without","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186062,"byte_end":186137,"line_start":63,"line_end":63,"column_start":1,"column_end":76}},{"value":"/     periodic reseeding.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186138,"byte_end":186165,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ -   [`SmallRng`] is an **insecure** PRNG designed to be fast, simple, require","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186166,"byte_end":186247,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/     little memory, and have good output quality.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186248,"byte_end":186300,"line_start":66,"line_end":66,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186301,"byte_end":186304,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ The algorithms selected for [`StdRng`] and [`SmallRng`] may change in any","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186305,"byte_end":186382,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/ release and may be platform-dependent, therefore they should be considered","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186383,"byte_end":186461,"line_start":69,"line_end":69,"column_start":1,"column_end":79}},{"value":"/ **not reproducible**.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186462,"byte_end":186487,"line_start":70,"line_end":70,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186488,"byte_end":186491,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ## Additional generators","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186492,"byte_end":186520,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186521,"byte_end":186524,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ **TRNGs**: The [`rdrand`] crate provides an interface to the RDRAND and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186525,"byte_end":186600,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ RDSEED instructions available in modern Intel and AMD CPUs.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186601,"byte_end":186664,"line_start":75,"line_end":75,"column_start":1,"column_end":64}},{"value":"/ The [`rand_jitter`] crate provides a user-space implementation of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186665,"byte_end":186734,"line_start":76,"line_end":76,"column_start":1,"column_end":70}},{"value":"/ entropy harvesting from CPU timer jitter, but is very slow and has","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186735,"byte_end":186805,"line_start":77,"line_end":77,"column_start":1,"column_end":71}},{"value":"/ [security issues](https://github.com/rust-random/rand/issues/699).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186806,"byte_end":186876,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186877,"byte_end":186880,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ **PRNGs**: Several companion crates are available, providing individual or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186881,"byte_end":186959,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ families of PRNG algorithms. These provide the implementations behind","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":186960,"byte_end":187033,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ [`StdRng`] and [`SmallRng`] but can also be used directly, indeed *should*","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187034,"byte_end":187112,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ be used directly when **reproducibility** matters.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187113,"byte_end":187167,"line_start":83,"line_end":83,"column_start":1,"column_end":55}},{"value":"/ Some suggestions are: [`rand_chacha`], [`rand_pcg`], [`rand_xoshiro`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187168,"byte_end":187242,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/ A full list can be found by searching for crates with the [`rng` tag].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187243,"byte_end":187317,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187318,"byte_end":187321,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ [`Rng`]: crate::Rng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187322,"byte_end":187345,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ [`RngCore`]: crate::RngCore","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187346,"byte_end":187377,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/ [`CryptoRng`]: crate::CryptoRng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187378,"byte_end":187413,"line_start":89,"line_end":89,"column_start":1,"column_end":36}},{"value":"/ [`SeedableRng`]: crate::SeedableRng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187414,"byte_end":187453,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ [`thread_rng`]: crate::thread_rng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187454,"byte_end":187491,"line_start":91,"line_end":91,"column_start":1,"column_end":38}},{"value":"/ [`rdrand`]: https://crates.io/crates/rdrand","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187492,"byte_end":187539,"line_start":92,"line_end":92,"column_start":1,"column_end":48}},{"value":"/ [`rand_jitter`]: https://crates.io/crates/rand_jitter","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187540,"byte_end":187597,"line_start":93,"line_end":93,"column_start":1,"column_end":58}},{"value":"/ [`rand_chacha`]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187598,"byte_end":187655,"line_start":94,"line_end":94,"column_start":1,"column_end":58}},{"value":"/ [`rand_pcg`]: https://crates.io/crates/rand_pcg","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187656,"byte_end":187707,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/ [`rand_xoshiro`]: https://crates.io/crates/rand_xoshiro","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187708,"byte_end":187767,"line_start":96,"line_end":96,"column_start":1,"column_end":60}},{"value":"/ [`rng` tag]: https://crates.io/keywords/rng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187768,"byte_end":187815,"line_start":97,"line_end":97,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":634},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"adapter","qualname":"::rngs::adapter","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\mod.rs","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":667},{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":741},{"krate":0,"index":744}],"decl_id":null,"docs":" Wrappers / adapters forming RNGs\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187865,"byte_end":187888,"line_start":100,"line_end":100,"column_start":1,"column_end":24}},{"value":"/ Wrappers / adapters forming RNGs","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\mod.rs","byte_start":189044,"byte_end":189080,"line_start":9,"line_end":9,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2302},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190556,"byte_end":190563,"line_start":39,"line_end":39,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::rngs::adapter::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":2304}],"decl_id":null,"docs":" An RNG that reads random bytes straight from any type supporting\n [`std::io::Read`], for example files.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from any type supporting","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":189767,"byte_end":189835,"line_start":20,"line_end":20,"column_start":1,"column_end":69}},{"value":"/ [`std::io::Read`], for example files.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":189836,"byte_end":189877,"line_start":21,"line_end":21,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":189878,"byte_end":189881,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This will work best with an infinite reader, but that is not required.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":189882,"byte_end":189956,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":189957,"byte_end":189960,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This can be used with `/dev/urandom` on Unix but it is recommended to use","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":189961,"byte_end":190038,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ [`OsRng`] instead.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190039,"byte_end":190061,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190062,"byte_end":190065,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190066,"byte_end":190078,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190079,"byte_end":190082,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ `ReadRng` uses [`std::io::Read::read_exact`], which retries on interrupts.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190083,"byte_end":190161,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ All other errors from the underlying reader, including when it does not","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190162,"byte_end":190237,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ have enough data, will only be reported through [`try_fill_bytes`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190238,"byte_end":190309,"line_start":32,"line_end":32,"column_start":1,"column_end":72}},{"value":"/ The other [`RngCore`] methods will panic in case of an error.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190310,"byte_end":190375,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190376,"byte_end":190379,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`OsRng`]: crate::rngs::OsRng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190380,"byte_end":190413,"line_start":35,"line_end":35,"column_start":1,"column_end":34}},{"value":"/ [`try_fill_bytes`]: RngCore::try_fill_bytes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190414,"byte_end":190461,"line_start":36,"line_end":36,"column_start":1,"column_end":48}},{"value":"deprecated(since = \"0.8.4\", note = \"removal due to lack of usage\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190479,"byte_end":190544,"line_start":38,"line_end":38,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190671,"byte_end":190674,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"pub fn new(R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190618,"byte_end":190659,"line_start":44,"line_end":44,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2308},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191612,"byte_end":191621,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"ReadError","qualname":"::rngs::adapter::read::ReadError","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ReadRng` error type\n","sig":null,"attributes":[{"value":"/ `ReadRng` error type","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191530,"byte_end":191554,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"deprecated(since = \"0.8.4\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191572,"byte_end":191600,"line_start":81,"line_end":81,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2313},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196571,"byte_end":196583,"line_start":79,"line_end":79,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::rngs::adapter::reseeding::ReseedingRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around any PRNG that implements [`BlockRngCore`], that adds the\n ability to reseed it.","sig":null,"attributes":[{"value":"/ A wrapper around any PRNG that implements [`BlockRngCore`], that adds the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":193970,"byte_end":194047,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ ability to reseed it.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194048,"byte_end":194073,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194074,"byte_end":194077,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `ReseedingRng` reseeds the underlying PRNG in the following cases:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194078,"byte_end":194148,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194149,"byte_end":194152,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - On a manual call to [`reseed()`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194153,"byte_end":194192,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/ - After `clone()`, the clone will be reseeded on first use.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194193,"byte_end":194256,"line_start":24,"line_end":24,"column_start":1,"column_end":64}},{"value":"/ - After a process is forked, the RNG in the child process is reseeded within","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194257,"byte_end":194337,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/   the next few generated values, depending on the block size of the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194338,"byte_end":194409,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/   underlying PRNG. For ChaCha and Hc128 this is a maximum of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194410,"byte_end":194474,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/   15 `u32` values before reseeding.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194475,"byte_end":194514,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/ - After the PRNG has generated a configurable number of random bytes.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194515,"byte_end":194588,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194589,"byte_end":194592,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # When should reseeding after a fixed number of generated bytes be used?","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194593,"byte_end":194669,"line_start":31,"line_end":31,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194670,"byte_end":194673,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Reseeding after a fixed number of generated bytes is never strictly","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194674,"byte_end":194745,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/ *necessary*. Cryptographic PRNGs don't have a limited number of bytes they","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194746,"byte_end":194824,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/ can output, or at least not a limit reachable in any practical way. There is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194825,"byte_end":194905,"line_start":35,"line_end":35,"column_start":1,"column_end":81}},{"value":"/ no such thing as 'running out of entropy'.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194906,"byte_end":194952,"line_start":36,"line_end":36,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194953,"byte_end":194956,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Occasionally reseeding can be seen as some form of 'security in depth'. Even","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":194957,"byte_end":195037,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ if in the future a cryptographic weakness is found in the CSPRNG being used,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195038,"byte_end":195118,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ or a flaw in the implementation, occasionally reseeding should make","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195119,"byte_end":195190,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ exploiting it much more difficult or even impossible.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195191,"byte_end":195248,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195249,"byte_end":195252,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Use [`ReseedingRng::new`] with a `threshold` of `0` to disable reseeding","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195253,"byte_end":195329,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/ after a fixed number of generated bytes.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195330,"byte_end":195374,"line_start":44,"line_end":44,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195375,"byte_end":195378,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195379,"byte_end":195399,"line_start":46,"line_end":46,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195400,"byte_end":195403,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Although unlikely, reseeding the wrapped PRNG can fail. `ReseedingRng` will","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195404,"byte_end":195483,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ never panic but try to handle the error intelligently through some","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195484,"byte_end":195554,"line_start":49,"line_end":49,"column_start":1,"column_end":71}},{"value":"/ combination of retrying and delaying reseeding until later.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195555,"byte_end":195618,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ If handling the source error fails `ReseedingRng` will continue generating","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195619,"byte_end":195697,"line_start":51,"line_end":51,"column_start":1,"column_end":79}},{"value":"/ data from the wrapped PRNG without reseeding.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195698,"byte_end":195747,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195748,"byte_end":195751,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Manually calling [`reseed()`] will not have this retry or delay logic, but","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195752,"byte_end":195830,"line_start":54,"line_end":54,"column_start":1,"column_end":79}},{"value":"/ reports the error.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195831,"byte_end":195853,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195854,"byte_end":195857,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195858,"byte_end":195871,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195872,"byte_end":195875,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195876,"byte_end":195883,"line_start":59,"line_end":59,"column_start":1,"column_end":8}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195884,"byte_end":195909,"line_start":60,"line_end":60,"column_start":1,"column_end":26}},{"value":"/ use rand_chacha::ChaCha20Core; // Internal part of ChaChaRng that","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195910,"byte_end":195979,"line_start":61,"line_end":61,"column_start":1,"column_end":70}},{"value":"/                              // implements BlockRngCore","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":195980,"byte_end":196039,"line_start":62,"line_end":62,"column_start":1,"column_end":60}},{"value":"/ use rand::rngs::OsRng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196040,"byte_end":196066,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ use rand::rngs::adapter::ReseedingRng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196067,"byte_end":196109,"line_start":64,"line_end":64,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196110,"byte_end":196113,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ let prng = ChaCha20Core::from_entropy();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196114,"byte_end":196158,"line_start":66,"line_end":66,"column_start":1,"column_end":45}},{"value":"/ let mut reseeding_rng = ReseedingRng::new(prng, 0, OsRng);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196159,"byte_end":196221,"line_start":67,"line_end":67,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196222,"byte_end":196225,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ println!(\"{}\", reseeding_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196226,"byte_end":196273,"line_start":69,"line_end":69,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196274,"byte_end":196277,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let mut cloned_rng = reseeding_rng.clone();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196278,"byte_end":196325,"line_start":71,"line_end":71,"column_start":1,"column_end":48}},{"value":"/ assert!(reseeding_rng.gen::<u64>() != cloned_rng.gen::<u64>());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196326,"byte_end":196393,"line_start":72,"line_end":72,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196394,"byte_end":196401,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196402,"byte_end":196405,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`BlockRngCore`]: rand_core::block::BlockRngCore","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196406,"byte_end":196458,"line_start":75,"line_end":75,"column_start":1,"column_end":53}},{"value":"/ [`ReseedingRng::new`]: ReseedingRng::new","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196459,"byte_end":196503,"line_start":76,"line_end":76,"column_start":1,"column_end":45}},{"value":"/ [`reseed()`]: ReseedingRng::reseed","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196504,"byte_end":196542,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":197087,"byte_end":197090,"line_start":95,"line_end":95,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n to use as reseeder.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` from an existing PRNG, combined with a RNG","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196790,"byte_end":196864,"line_start":89,"line_end":89,"column_start":5,"column_end":79}},{"value":"/ to use as reseeder.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196869,"byte_end":196892,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196897,"byte_end":196900,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ `threshold` sets the number of generated bytes after which to reseed the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196905,"byte_end":196981,"line_start":92,"line_end":92,"column_start":5,"column_end":81}},{"value":"/ PRNG. Set it to zero to never reseed based on the number of generated","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196986,"byte_end":197059,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/ values.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":197064,"byte_end":197075,"line_start":94,"line_end":94,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":197275,"byte_end":197281,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"reseed","qualname":"<ReseedingRng<R, Rsdr>>::reseed","value":"pub fn reseed(&mut Self) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal PRNG.\n","sig":null,"attributes":[{"value":"/ Reseed the internal PRNG.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":197234,"byte_end":197263,"line_start":99,"line_end":99,"column_start":5,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mock","qualname":"::rngs::mock","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","parent":null,"children":[{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":2334},{"krate":0,"index":2337},{"krate":0,"index":2339},{"krate":0,"index":2341},{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2346},{"krate":0,"index":758},{"krate":0,"index":760}],"decl_id":null,"docs":" Mock random number generator\n","sig":null,"attributes":[{"value":"/ Mock random number generator","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":205872,"byte_end":205904,"line_start":9,"line_end":9,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2334},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206574,"byte_end":206581,"line_start":32,"line_end":32,"column_start":12,"column_end":19},"name":"StepRng","qualname":"::rngs::mock::StepRng","value":"StepRng {  }","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2336}],"decl_id":null,"docs":" A simple implementation of `RngCore` for testing purposes.","sig":null,"attributes":[{"value":"/ A simple implementation of `RngCore` for testing purposes.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206012,"byte_end":206074,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206075,"byte_end":206078,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This generates an arithmetic sequence (i.e. adds a constant each step)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206079,"byte_end":206153,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ over a `u64` number, using wrapping arithmetic. If the increment is 0","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206154,"byte_end":206227,"line_start":19,"line_end":19,"column_start":1,"column_end":74}},{"value":"/ the generator yields a constant.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206228,"byte_end":206264,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206265,"byte_end":206268,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206269,"byte_end":206276,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206277,"byte_end":206295,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/ use rand::rngs::mock::StepRng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206296,"byte_end":206330,"line_start":24,"line_end":24,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206331,"byte_end":206334,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ let mut my_rng = StepRng::new(2, 1);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206335,"byte_end":206375,"line_start":26,"line_end":26,"column_start":1,"column_end":41}},{"value":"/ let sample: [u64; 3] = my_rng.gen();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206376,"byte_end":206416,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(sample, [2, 3, 4]);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206417,"byte_end":206451,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206452,"byte_end":206459,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206771,"byte_end":206774,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<StepRng>::new","value":"pub fn new(u64, u64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `StepRng`, yielding an arithmetic sequence starting with\n `initial` and incremented by `increment` each time.\n","sig":null,"attributes":[{"value":"/ Create a `StepRng`, yielding an arithmetic sequence starting with","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206630,"byte_end":206699,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ `initial` and incremented by `increment` each time.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206704,"byte_end":206759,"line_start":39,"line_end":39,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2348},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209277,"byte_end":209283,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::rngs::std::StdRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient\n on the current platform, to be statistically strong and unpredictable\n (meaning a cryptographically secure PRNG).","sig":null,"attributes":[{"value":"/ The standard RNG. The PRNG algorithm in `StdRng` is chosen to be efficient","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208347,"byte_end":208425,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ on the current platform, to be statistically strong and unpredictable","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208426,"byte_end":208499,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ (meaning a cryptographically secure PRNG).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208500,"byte_end":208546,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208547,"byte_end":208550,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The current algorithm used is the ChaCha block cipher with 12 rounds. Please","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208551,"byte_end":208631,"line_start":21,"line_end":21,"column_start":1,"column_end":81}},{"value":"/ see this relevant [rand issue] for the discussion. This may change as new ","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208632,"byte_end":208710,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ evidence of cipher security and performance becomes available.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208711,"byte_end":208777,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208778,"byte_end":208781,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The algorithm is deterministic but should not be considered reproducible","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208782,"byte_end":208858,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ due to dependence on configuration and possible replacement in future","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208859,"byte_end":208932,"line_start":26,"line_end":26,"column_start":1,"column_end":74}},{"value":"/ library versions. For a secure reproducible generator, we recommend use of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":208933,"byte_end":209011,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ the [rand_chacha] crate directly.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209012,"byte_end":209049,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209050,"byte_end":209053,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ [rand_chacha]: https://crates.io/crates/rand_chacha","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209054,"byte_end":209109,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/ [rand issue]: https://github.com/rust-random/rand/issues/932","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209110,"byte_end":209174,"line_start":31,"line_end":31,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2362},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213546,"byte_end":213555,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::rngs::thread::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":2363}],"decl_id":null,"docs":" A reference to the thread-local generator","sig":null,"attributes":[{"value":"/ A reference to the thread-local generator","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212463,"byte_end":212508,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212509,"byte_end":212512,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ An instance can be obtained via [`thread_rng`] or via `ThreadRng::default()`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212513,"byte_end":212594,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ This handle is safe to use everywhere (including thread-local destructors)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212595,"byte_end":212673,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ but cannot be passed between threads (is not `Send` or `Sync`).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212674,"byte_end":212741,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212742,"byte_end":212745,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ `ThreadRng` uses the same PRNG as [`StdRng`] for security and performance","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212746,"byte_end":212823,"line_start":46,"line_end":46,"column_start":1,"column_end":78}},{"value":"/ and is automatically seeded from [`OsRng`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212824,"byte_end":212871,"line_start":47,"line_end":47,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212872,"byte_end":212875,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Unlike `StdRng`, `ThreadRng` uses the  [`ReseedingRng`] wrapper to reseed","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212876,"byte_end":212953,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ the PRNG from fresh entropy every 64 kiB of random data as well as after a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":212954,"byte_end":213032,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/ fork on Unix (though not quite immediately; see documentation of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213033,"byte_end":213101,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ [`ReseedingRng`]).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213102,"byte_end":213124,"line_start":52,"line_end":52,"column_start":1,"column_end":23}},{"value":"/ Note that the reseeding is done as an extra precaution against side-channel","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213125,"byte_end":213204,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ attacks and mis-use (e.g. if somehow weak entropy were supplied initially).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213205,"byte_end":213284,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ The PRNG algorithms used are assumed to be secure.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213285,"byte_end":213339,"line_start":55,"line_end":55,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213340,"byte_end":213343,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ [`ReseedingRng`]: crate::rngs::adapter::ReseedingRng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213344,"byte_end":213400,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ [`StdRng`]: crate::rngs::StdRng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":213401,"byte_end":213436,"line_start":58,"line_end":58,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":829},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214642,"byte_end":214652,"line_start":87,"line_end":87,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::rngs::thread::thread_rng","value":"pub fn thread_rng() -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number generator,\n seeded by the system. Intended to be used in method chaining style,\n e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.\n `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making\n `ThreadRng::default()` equivalent.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number generator,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214191,"byte_end":214264,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ seeded by the system. Intended to be used in method chaining style,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214265,"byte_end":214336,"line_start":80,"line_end":80,"column_start":1,"column_end":72}},{"value":"/ e.g. `thread_rng().gen::<i32>()`, or cached locally, e.g.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214337,"byte_end":214398,"line_start":81,"line_end":81,"column_start":1,"column_end":62}},{"value":"/ `let mut rng = thread_rng();`.  Invoked by the `Default` trait, making","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214399,"byte_end":214473,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/ `ThreadRng::default()` equivalent.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214474,"byte_end":214512,"line_start":83,"line_end":83,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214513,"byte_end":214516,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ For more information see [`ThreadRng`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214517,"byte_end":214560,"line_start":85,"line_end":85,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":848},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"seq","qualname":"::seq","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","parent":null,"children":[{"krate":0,"index":849},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":989},{"krate":0,"index":1017},{"krate":0,"index":1027},{"krate":0,"index":1071},{"krate":0,"index":2406},{"krate":0,"index":2413},{"krate":0,"index":1073},{"krate":0,"index":1081},{"krate":0,"index":1086}],"decl_id":null,"docs":" Sequence-related functionality","sig":null,"attributes":[{"value":"/ Sequence-related functionality","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216537,"byte_end":216571,"line_start":9,"line_end":9,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216572,"byte_end":216575,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This module provides:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216576,"byte_end":216601,"line_start":11,"line_end":11,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216602,"byte_end":216605,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ *   [`SliceRandom`] slice sampling and mutation","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216606,"byte_end":216657,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ *   [`IteratorRandom`] iterator sampling","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216658,"byte_end":216702,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ *   [`index::sample`] low-level API to choose multiple indices from","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216703,"byte_end":216774,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/     `0..length`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216775,"byte_end":216794,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216795,"byte_end":216798,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Also see:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216799,"byte_end":216812,"line_start":18,"line_end":18,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216813,"byte_end":216816,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ *   [`crate::distributions::WeightedIndex`] distribution which provides","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216817,"byte_end":216892,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/     weighted index sampling.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216893,"byte_end":216925,"line_start":21,"line_end":21,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216926,"byte_end":216929,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ In order to make results reproducible across 32-64 bit architectures, all","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":216930,"byte_end":217007,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ `usize` indices are sampled as a `u32` where possible (also providing a","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217008,"byte_end":217083,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ small performance boost in some cases).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217084,"byte_end":217127,"line_start":25,"line_end":25,"column_start":1,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":849},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::seq::index","value":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":870},{"krate":0,"index":873},{"krate":0,"index":876},{"krate":0,"index":2373},{"krate":0,"index":2380},{"krate":0,"index":2382},{"krate":0,"index":879},{"krate":0,"index":886},{"krate":0,"index":890},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":2384},{"krate":0,"index":2392},{"krate":0,"index":899},{"krate":0,"index":906},{"krate":0,"index":2395},{"krate":0,"index":2402},{"krate":0,"index":2404},{"krate":0,"index":908},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":923},{"krate":0,"index":927},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":955},{"krate":0,"index":959},{"krate":0,"index":963},{"krate":0,"index":967}],"decl_id":null,"docs":" Low-level API for sampling indices\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217130,"byte_end":217155,"line_start":28,"line_end":28,"column_start":1,"column_end":26}},{"value":"/ Low-level API for sampling indices","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":262957,"byte_end":262995,"line_start":9,"line_end":9,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2374},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263761,"byte_end":263764,"line_start":35,"line_end":35,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVec::U32","value":"IndexVec::U32(Vec<u32>)","parent":{"krate":0,"index":2373},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2377},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263799,"byte_end":263804,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVec::USize","value":"IndexVec::USize(Vec<usize>)","parent":{"krate":0,"index":2373},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2373},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263727,"byte_end":263735,"line_start":33,"line_end":33,"column_start":10,"column_end":18},"name":"IndexVec","qualname":"::seq::index::IndexVec","value":"pub enum IndexVec { U32(Vec<u32>), USize(Vec<usize>), }","parent":null,"children":[{"krate":0,"index":2374},{"krate":0,"index":2377}],"decl_id":null,"docs":" A vector of indices.","sig":null,"attributes":[{"value":"/ A vector of indices.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263549,"byte_end":263573,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263574,"byte_end":263577,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ Multiple internal representations are possible.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263578,"byte_end":263629,"line_start":30,"line_end":30,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263900,"byte_end":263903,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexVec>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of indices\n","sig":null,"attributes":[{"value":"/ Returns the number of indices","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263841,"byte_end":263874,"line_start":41,"line_end":41,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263879,"byte_end":263888,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264121,"byte_end":264129,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexVec>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the length is 0.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the length is 0.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264057,"byte_end":264095,"line_start":50,"line_end":50,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264100,"byte_end":264109,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264466,"byte_end":264471,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"index","qualname":"<IndexVec>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the value at the given `index`.","sig":null,"attributes":[{"value":"/ Return the value at the given `index`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264292,"byte_end":264334,"line_start":59,"line_end":59,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264339,"byte_end":264342,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ (Note: we cannot implement [`std::ops::Index`] because of lifetime","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264347,"byte_end":264417,"line_start":61,"line_end":61,"column_start":5,"column_end":75}},{"value":"/ restrictions.)","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264422,"byte_end":264440,"line_start":62,"line_end":62,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264445,"byte_end":264454,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264750,"byte_end":264758,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<IndexVec>::into_vec","value":"pub fn into_vec(Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Return result as a `Vec<usize>`. Conversion may or may not be trivial.\n","sig":null,"attributes":[{"value":"/ Return result as a `Vec<usize>`. Conversion may or may not be trivial.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264650,"byte_end":264724,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264729,"byte_end":264738,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":265023,"byte_end":265027,"line_start":82,"line_end":82,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexVec>::iter","value":"pub fn iter(&Self) -> IndexVecIter","parent":null,"children":[],"decl_id":null,"docs":" Iterate over the indices as a sequence of `usize` values\n","sig":null,"attributes":[{"value":"/ Iterate over the indices as a sequence of `usize` values","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":264937,"byte_end":264997,"line_start":80,"line_end":80,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":265002,"byte_end":265011,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2386},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266592,"byte_end":266595,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIter::U32","value":"IndexVecIter::U32(slice::Iter)","parent":{"krate":0,"index":2384},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2389},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266642,"byte_end":266647,"line_start":140,"line_end":140,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIter::USize","value":"IndexVecIter::USize(slice::Iter)","parent":{"krate":0,"index":2384},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2384},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266550,"byte_end":266562,"line_start":136,"line_end":136,"column_start":10,"column_end":22},"name":"IndexVecIter","qualname":"::seq::index::IndexVecIter","value":"pub enum IndexVecIter<'a> { U32(slice::Iter), USize(slice::Iter), }","parent":null,"children":[{"krate":0,"index":2386},{"krate":0,"index":2389}],"decl_id":null,"docs":" Return type of `IndexVec::iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::iter`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266487,"byte_end":266523,"line_start":134,"line_end":134,"column_start":1,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2396},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267383,"byte_end":267386,"line_start":170,"line_end":170,"column_start":5,"column_end":8},"name":"U32","qualname":"::seq::index::IndexVecIntoIter::U32","value":"IndexVecIntoIter::U32(vec::IntoIter<u32>)","parent":{"krate":0,"index":2395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2399},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267431,"byte_end":267436,"line_start":172,"line_end":172,"column_start":5,"column_end":10},"name":"USize","qualname":"::seq::index::IndexVecIntoIter::USize","value":"IndexVecIntoIter::USize(vec::IntoIter<usize>)","parent":{"krate":0,"index":2395},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2395},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267341,"byte_end":267357,"line_start":168,"line_end":168,"column_start":10,"column_end":26},"name":"IndexVecIntoIter","qualname":"::seq::index::IndexVecIntoIter","value":"pub enum IndexVecIntoIter {\n    U32(vec::IntoIter<u32>),\n    USize(vec::IntoIter<usize>),\n}","parent":null,"children":[{"krate":0,"index":2396},{"krate":0,"index":2399}],"decl_id":null,"docs":" Return type of `IndexVec::into_iter`.\n","sig":null,"attributes":[{"value":"/ Return type of `IndexVec::into_iter`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267266,"byte_end":267307,"line_start":166,"line_end":166,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":916},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":269112,"byte_end":269118,"line_start":222,"line_end":222,"column_start":8,"column_end":14},"name":"sample","qualname":"::seq::index::sample","value":"pub fn sample<R: ?Sized>(&mut R, usize, usize) -> IndexVec where R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in random order (fully shuffled).","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268044,"byte_end":268119,"line_start":200,"line_end":200,"column_start":1,"column_end":76}},{"value":"/ return them in random order (fully shuffled).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268120,"byte_end":268169,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268170,"byte_end":268173,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268174,"byte_end":268250,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268251,"byte_end":268328,"line_start":204,"line_end":204,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268329,"byte_end":268348,"line_start":205,"line_end":205,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268349,"byte_end":268352,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ The implementation used is not specified; we automatically select the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268353,"byte_end":268426,"line_start":207,"line_end":207,"column_start":1,"column_end":74}},{"value":"/ fastest available algorithm for the `length` and `amount` parameters","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268427,"byte_end":268499,"line_start":208,"line_end":208,"column_start":1,"column_end":73}},{"value":"/ (based on detailed profiling on an Intel Haswell CPU). Roughly speaking,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268500,"byte_end":268576,"line_start":209,"line_end":209,"column_start":1,"column_end":77}},{"value":"/ complexity is `O(amount)`, except that when `amount` is small, performance","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268577,"byte_end":268655,"line_start":210,"line_end":210,"column_start":1,"column_end":79}},{"value":"/ is closer to `O(amount^2)`, and when `length` is close to `amount` then","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268656,"byte_end":268731,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ `O(length)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268732,"byte_end":268748,"line_start":212,"line_end":212,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268749,"byte_end":268752,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Note that performance is significantly better over `u32` indices than over","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268753,"byte_end":268831,"line_start":214,"line_end":214,"column_start":1,"column_end":79}},{"value":"/ `u64` indices. Because of this we hide the underlying type behind an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268832,"byte_end":268904,"line_start":215,"line_end":215,"column_start":1,"column_end":73}},{"value":"/ abstraction, `IndexVec`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268905,"byte_end":268933,"line_start":216,"line_end":216,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268934,"byte_end":268937,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ If an allocation-free `no_std` function is required, it is suggested","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268938,"byte_end":269010,"line_start":218,"line_end":218,"column_start":1,"column_end":73}},{"value":"/ to adapt the internal `sample_floyd` implementation.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":269011,"byte_end":269067,"line_start":219,"line_end":219,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":269068,"byte_end":269071,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":269072,"byte_end":269104,"line_start":221,"line_end":221,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":923},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271367,"byte_end":271382,"line_start":277,"line_end":277,"column_start":8,"column_end":23},"name":"sample_weighted","qualname":"::seq::index::sample_weighted","value":"pub fn sample_weighted<R: ?Sized, F, X>(&mut R, usize, F, usize)\n-> Result<IndexVec, WeightedError> where R: Rng, F: Fn(usize) -> X,\nX: Into<f64>","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample exactly `amount` distinct indices from `0..length`, and\n return them in an arbitrary order (there is no guarantee of shuffling or\n ordering). The weights are to be provided by the input function `weights`,\n which will be called once for each index.","sig":null,"attributes":[{"value":"/ Randomly sample exactly `amount` distinct indices from `0..length`, and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270593,"byte_end":270668,"line_start":261,"line_end":261,"column_start":1,"column_end":76}},{"value":"/ return them in an arbitrary order (there is no guarantee of shuffling or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270669,"byte_end":270745,"line_start":262,"line_end":262,"column_start":1,"column_end":77}},{"value":"/ ordering). The weights are to be provided by the input function `weights`,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270746,"byte_end":270824,"line_start":263,"line_end":263,"column_start":1,"column_end":79}},{"value":"/ which will be called once for each index.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270825,"byte_end":270870,"line_start":264,"line_end":264,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270871,"byte_end":270874,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ This method is used internally by the slice sampling methods, but it can","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270875,"byte_end":270951,"line_start":266,"line_end":266,"column_start":1,"column_end":77}},{"value":"/ sometimes be useful to have the indices themselves so this is provided as","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":270952,"byte_end":271029,"line_start":267,"line_end":267,"column_start":1,"column_end":78}},{"value":"/ an alternative.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271030,"byte_end":271049,"line_start":268,"line_end":268,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271050,"byte_end":271053,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ This implementation uses `O(length + amount)` space and `O(length)` time","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271054,"byte_end":271130,"line_start":270,"line_end":270,"column_start":1,"column_end":77}},{"value":"/ if the \"nightly\" feature is enabled, or `O(length)` space and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271131,"byte_end":271196,"line_start":271,"line_end":271,"column_start":1,"column_end":66}},{"value":"/ `O(length + amount * log length)` time otherwise.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271197,"byte_end":271250,"line_start":272,"line_end":272,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271251,"byte_end":271254,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ Panics if `amount > length`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271255,"byte_end":271287,"line_start":274,"line_end":274,"column_start":1,"column_end":33}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":271288,"byte_end":271311,"line_start":275,"line_end":275,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":989},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218077,"byte_end":218088,"line_start":59,"line_end":59,"column_start":11,"column_end":22},"name":"SliceRandom","qualname":"::seq::SliceRandom","value":"SliceRandom","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":993},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":1003},{"krate":0,"index":1009},{"krate":0,"index":1013},{"krate":0,"index":1015}],"decl_id":null,"docs":" Extension trait on slices, providing random mutation and sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on slices, providing random mutation and sampling methods.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217495,"byte_end":217573,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217574,"byte_end":217577,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all `[T]` slice types, providing several","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217578,"byte_end":217651,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ methods for choosing and shuffling elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217652,"byte_end":217727,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217728,"byte_end":217731,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217732,"byte_end":217739,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217740,"byte_end":217771,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217772,"byte_end":217775,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217776,"byte_end":217813,"line_start":49,"line_end":49,"column_start":1,"column_end":38}},{"value":"/ let mut bytes = \"Hello, random!\".to_string().into_bytes();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217814,"byte_end":217876,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ bytes.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217877,"byte_end":217905,"line_start":51,"line_end":51,"column_start":1,"column_end":29}},{"value":"/ let str = String::from_utf8(bytes).unwrap();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217906,"byte_end":217954,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ println!(\"{}\", str);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217955,"byte_end":217979,"line_start":53,"line_end":53,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217980,"byte_end":217987,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217988,"byte_end":218027,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218028,"byte_end":218039,"line_start":56,"line_end":56,"column_start":1,"column_end":12}},{"value":"/ l,nmroHado !le","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218040,"byte_end":218058,"line_start":57,"line_end":57,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218059,"byte_end":218066,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":990},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218126,"byte_end":218130,"line_start":61,"line_end":61,"column_start":10,"column_end":14},"name":"Item","qualname":"::seq::SliceRandom::Item","value":"type Item;","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" The element type.\n","sig":null,"attributes":[{"value":"/ The element type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218095,"byte_end":218116,"line_start":60,"line_end":60,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218616,"byte_end":218622,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::SliceRandom::choose","value":"pub fn choose<R: ?Sized>(&Self, &mut R) -> Option<&Self::Item> where R: Rng","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns a reference to one random element of the slice, or `None` if the\n slice is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to one random element of the slice, or `None` if the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218137,"byte_end":218213,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ slice is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218218,"byte_end":218237,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218242,"byte_end":218245,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218250,"byte_end":218287,"line_start":66,"line_end":66,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218292,"byte_end":218295,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218300,"byte_end":218313,"line_start":68,"line_end":68,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218318,"byte_end":218321,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218326,"byte_end":218333,"line_start":70,"line_end":70,"column_start":5,"column_end":12}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218338,"byte_end":218363,"line_start":71,"line_end":71,"column_start":5,"column_end":30}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218368,"byte_end":218399,"line_start":72,"line_end":72,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218404,"byte_end":218407,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218412,"byte_end":218451,"line_start":74,"line_end":74,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218456,"byte_end":218487,"line_start":75,"line_end":75,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", choices.choose(&mut rng));","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218492,"byte_end":218539,"line_start":76,"line_end":76,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(choices[..0].choose(&mut rng), None);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218544,"byte_end":218596,"line_start":77,"line_end":77,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218601,"byte_end":218608,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218867,"byte_end":218877,"line_start":86,"line_end":86,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::seq::SliceRandom::choose_mut","value":"pub fn choose_mut<R: ?Sized>(&mut Self, &mut R) -> Option<&mut Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Returns a mutable reference to one random element of the slice, or\n `None` if the slice is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to one random element of the slice, or","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218701,"byte_end":218771,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ `None` if the slice is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218776,"byte_end":218809,"line_start":83,"line_end":83,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218814,"byte_end":218817,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(1)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218822,"byte_end":218859,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219966,"byte_end":219981,"line_start":115,"line_end":115,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::SliceRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(&Self, &mut R, usize)\n-> SliceChooseIter<, Self, Self::Item> where R: Rng","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Chooses `amount` elements from the slice at random, without repetition,\n and in random order. The returned iterator is appropriate both for\n collection into a `Vec` and filling an existing buffer (see example).","sig":null,"attributes":[{"value":"/ Chooses `amount` elements from the slice at random, without repetition,","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":218964,"byte_end":219039,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ and in random order. The returned iterator is appropriate both for","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219044,"byte_end":219114,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ collection into a `Vec` and filling an existing buffer (see example).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219119,"byte_end":219192,"line_start":91,"line_end":91,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219197,"byte_end":219200,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ In case this API is not sufficiently flexible, use [`index::sample`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219205,"byte_end":219278,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219283,"byte_end":219286,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is the same as [`index::sample`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219291,"byte_end":219351,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219356,"byte_end":219359,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219364,"byte_end":219377,"line_start":97,"line_end":97,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219382,"byte_end":219389,"line_start":98,"line_end":98,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219394,"byte_end":219425,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219430,"byte_end":219433,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let mut rng = &mut rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219438,"byte_end":219480,"line_start":101,"line_end":101,"column_start":5,"column_end":47}},{"value":"/ let sample = \"Hello, audience!\".as_bytes();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219485,"byte_end":219532,"line_start":102,"line_end":102,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219537,"byte_end":219540,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ // collect the results into a vector:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219545,"byte_end":219586,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/ let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219591,"byte_end":219667,"line_start":105,"line_end":105,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219672,"byte_end":219675,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ // store in a buffer:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219680,"byte_end":219705,"line_start":107,"line_end":107,"column_start":5,"column_end":30}},{"value":"/ let mut buf = [0u8; 5];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219710,"byte_end":219737,"line_start":108,"line_end":108,"column_start":5,"column_end":32}},{"value":"/ for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219742,"byte_end":219828,"line_start":109,"line_end":109,"column_start":5,"column_end":91}},{"value":"/     *slot = *b;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219833,"byte_end":219852,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219857,"byte_end":219862,"line_start":111,"line_end":111,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219867,"byte_end":219874,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":219879,"byte_end":219904,"line_start":113,"line_end":113,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221177,"byte_end":221192,"line_start":143,"line_end":143,"column_start":8,"column_end":23},"name":"choose_weighted","qualname":"::seq::SliceRandom::choose_weighted","value":"pub fn choose_weighted<R: ?Sized, F, B, X>(&Self, &mut R, F)\n-> Result<&Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) -> B,\nB: SampleBorrow<X>, X: SampleUniform + for<'a> ::core::ops::AddAssign<&'a X> +\n::core::cmp::PartialOrd<X> + Clone + Default","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Similar to [`choose`], but where the likelihood of each outcome may be\n specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose`], but where the likelihood of each outcome may be","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220089,"byte_end":220163,"line_start":118,"line_end":118,"column_start":5,"column_end":79}},{"value":"/ specified.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220168,"byte_end":220182,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220187,"byte_end":220190,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220195,"byte_end":220263,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220268,"byte_end":220342,"line_start":122,"line_end":122,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220347,"byte_end":220418,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220423,"byte_end":220426,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220431,"byte_end":220482,"line_start":125,"line_end":125,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted_mut`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220487,"byte_end":220553,"line_start":126,"line_end":126,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220558,"byte_end":220561,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220566,"byte_end":220579,"line_start":128,"line_end":128,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220584,"byte_end":220587,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220592,"byte_end":220599,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220604,"byte_end":220629,"line_start":131,"line_end":131,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220634,"byte_end":220637,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220642,"byte_end":220691,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220696,"byte_end":220727,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/ // 50% chance to print 'a', 25% chance to print 'b', 25% chance to print 'c'","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220732,"byte_end":220812,"line_start":135,"line_end":135,"column_start":5,"column_end":85}},{"value":"/ println!(\"{:?}\", choices.choose_weighted(&mut rng, |item| item.1).unwrap().0);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220817,"byte_end":220899,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220904,"byte_end":220911,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/ [`choose`]: SliceRandom::choose","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220916,"byte_end":220951,"line_start":138,"line_end":138,"column_start":5,"column_end":40}},{"value":"/ [`choose_weighted_mut`]: SliceRandom::choose_weighted_mut","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":220956,"byte_end":221017,"line_start":139,"line_end":139,"column_start":5,"column_end":66}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221022,"byte_end":221085,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221090,"byte_end":221115,"line_start":141,"line_end":141,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222289,"byte_end":222308,"line_start":171,"line_end":171,"column_start":8,"column_end":27},"name":"choose_weighted_mut","qualname":"::seq::SliceRandom::choose_weighted_mut","value":"pub fn choose_weighted_mut<R: ?Sized, F, B, X>(&mut Self, &mut R, F)\n-> Result<&mut Self::Item, WeightedError> where R: Rng, F: Fn(&Self::Item) ->\nB, B: SampleBorrow<X>, X: SampleUniform +\nfor<'a> ::core::ops::AddAssign<&'a X> + ::core::cmp::PartialOrd<X> + Clone +\nDefault","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Similar to [`choose_mut`], but where the likelihood of each outcome may\n be specified.","sig":null,"attributes":[{"value":"/ Similar to [`choose_mut`], but where the likelihood of each outcome may","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221551,"byte_end":221626,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ be specified.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221631,"byte_end":221648,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221653,"byte_end":221656,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221661,"byte_end":221729,"line_start":159,"line_end":159,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221734,"byte_end":221808,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221813,"byte_end":221884,"line_start":161,"line_end":161,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221889,"byte_end":221892,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221897,"byte_end":221948,"line_start":163,"line_end":163,"column_start":5,"column_end":56}},{"value":"/ See also [`choose_weighted`], [`distributions::weighted`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":221953,"byte_end":222015,"line_start":164,"line_end":164,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222020,"byte_end":222023,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ [`choose_mut`]: SliceRandom::choose_mut","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222028,"byte_end":222071,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/ [`choose_weighted`]: SliceRandom::choose_weighted","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222076,"byte_end":222129,"line_start":167,"line_end":167,"column_start":5,"column_end":58}},{"value":"/ [`distributions::weighted`]: crate::distributions::weighted","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222134,"byte_end":222197,"line_start":168,"line_end":168,"column_start":5,"column_end":68}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222202,"byte_end":222227,"line_start":169,"line_end":169,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224525,"byte_end":224549,"line_start":220,"line_end":220,"column_start":8,"column_end":32},"name":"choose_multiple_weighted","qualname":"::seq::SliceRandom::choose_multiple_weighted","value":"pub fn choose_multiple_weighted<R: ?Sized, F, X>(&Self, &mut R, usize, F)\n-> Result<SliceChooseIter<, Self, Self::Item>, WeightedError> where R: Rng,\nF: Fn(&Self::Item) -> X, X: Into<f64>","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Similar to [`choose_multiple`], but where the likelihood of each element's\n inclusion in the output may be specified. The elements are returned in an\n arbitrary, unspecified order.","sig":null,"attributes":[{"value":"/ Similar to [`choose_multiple`], but where the likelihood of each element's","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222675,"byte_end":222753,"line_start":184,"line_end":184,"column_start":5,"column_end":83}},{"value":"/ inclusion in the output may be specified. The elements are returned in an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222758,"byte_end":222835,"line_start":185,"line_end":185,"column_start":5,"column_end":82}},{"value":"/ arbitrary, unspecified order.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222840,"byte_end":222873,"line_start":186,"line_end":186,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222878,"byte_end":222881,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ The specified function `weight` maps each item `x` to a relative","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222886,"byte_end":222954,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/ likelihood `weight(x)`. The probability of each item being selected is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":222959,"byte_end":223033,"line_start":189,"line_end":189,"column_start":5,"column_end":79}},{"value":"/ therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223038,"byte_end":223109,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223114,"byte_end":223117,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ If all of the weights are equal, even if they are all zero, each element has","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223122,"byte_end":223202,"line_start":192,"line_end":192,"column_start":5,"column_end":85}},{"value":"/ an equal likelihood of being selected.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223207,"byte_end":223249,"line_start":193,"line_end":193,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223254,"byte_end":223257,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ The complexity of this method depends on the feature `partition_at_index`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223262,"byte_end":223340,"line_start":195,"line_end":195,"column_start":5,"column_end":83}},{"value":"/ If the feature is enabled, then for slices of length `n`, the complexity","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223345,"byte_end":223421,"line_start":196,"line_end":196,"column_start":5,"column_end":81}},{"value":"/ is `O(n)` space and `O(n)` time. Otherwise, the complexity is `O(n)` space and","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223426,"byte_end":223508,"line_start":197,"line_end":197,"column_start":5,"column_end":87}},{"value":"/ `O(n * log amount)` time.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223513,"byte_end":223542,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223547,"byte_end":223550,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223555,"byte_end":223568,"line_start":200,"line_end":200,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223573,"byte_end":223576,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223581,"byte_end":223588,"line_start":202,"line_end":202,"column_start":5,"column_end":12}},{"value":"/ use rand::prelude::*;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223593,"byte_end":223618,"line_start":203,"line_end":203,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223623,"byte_end":223626,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ let choices = [('a', 2), ('b', 1), ('c', 1)];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223631,"byte_end":223680,"line_start":205,"line_end":205,"column_start":5,"column_end":54}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223685,"byte_end":223716,"line_start":206,"line_end":206,"column_start":5,"column_end":36}},{"value":"/ // First Draw * Second Draw = total odds","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223721,"byte_end":223765,"line_start":207,"line_end":207,"column_start":5,"column_end":49}},{"value":"/ // -----------------------","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223770,"byte_end":223800,"line_start":208,"line_end":208,"column_start":5,"column_end":35}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'b']` in some order.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223805,"byte_end":223899,"line_start":209,"line_end":209,"column_start":5,"column_end":99}},{"value":"/ // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'c']` in some order.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":223904,"byte_end":223998,"line_start":210,"line_end":210,"column_start":5,"column_end":99}},{"value":"/ // (25% * 33%) + (25% * 33%) = 16.6% chance that the output is `['b', 'c']` in some order.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224003,"byte_end":224097,"line_start":211,"line_end":211,"column_start":5,"column_end":99}},{"value":"/ println!(\"{:?}\", choices.choose_multiple_weighted(&mut rng, 2, |item| item.1).unwrap().collect::<Vec<_>>());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224102,"byte_end":224214,"line_start":212,"line_end":212,"column_start":5,"column_end":117}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224219,"byte_end":224226,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"/ [`choose_multiple`]: SliceRandom::choose_multiple","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224231,"byte_end":224284,"line_start":214,"line_end":214,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224442,"byte_end":224465,"line_start":218,"line_end":218,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225200,"byte_end":225207,"line_start":244,"line_end":244,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::seq::SliceRandom::shuffle","value":"pub fn shuffle<R: ?Sized>(&mut Self, &mut R) where R: Rng","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224775,"byte_end":224812,"line_start":228,"line_end":228,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224817,"byte_end":224820,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ For slices of length `n`, complexity is `O(n)`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224825,"byte_end":224876,"line_start":230,"line_end":230,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224881,"byte_end":224884,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224889,"byte_end":224902,"line_start":232,"line_end":232,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224907,"byte_end":224910,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224915,"byte_end":224922,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/ use rand::seq::SliceRandom;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224927,"byte_end":224958,"line_start":235,"line_end":235,"column_start":5,"column_end":36}},{"value":"/ use rand::thread_rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224963,"byte_end":224988,"line_start":236,"line_end":236,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":224993,"byte_end":224996,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225001,"byte_end":225032,"line_start":238,"line_end":238,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3, 4, 5];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225037,"byte_end":225069,"line_start":239,"line_end":239,"column_start":5,"column_end":37}},{"value":"/ println!(\"Unshuffled: {:?}\", y);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225074,"byte_end":225110,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/ y.shuffle(&mut rng);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225115,"byte_end":225139,"line_start":241,"line_end":241,"column_start":5,"column_end":29}},{"value":"/ println!(\"Shuffled:   {:?}\", y);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225144,"byte_end":225180,"line_start":242,"line_end":242,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225185,"byte_end":225192,"line_start":243,"line_end":243,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226072,"byte_end":226087,"line_start":264,"line_end":264,"column_start":8,"column_end":23},"name":"partial_shuffle","qualname":"::seq::SliceRandom::partial_shuffle","value":"pub fn partial_shuffle<R: ?Sized>(&mut Self, &mut R, usize)\n-> (&mut [Self::Item], &mut [Self::Item]) where R: Rng","parent":{"krate":0,"index":989},"children":[],"decl_id":null,"docs":" Shuffle a slice in place, but exit early.","sig":null,"attributes":[{"value":"/ Shuffle a slice in place, but exit early.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225267,"byte_end":225312,"line_start":247,"line_end":247,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225317,"byte_end":225320,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Returns two mutable slices from the source slice. The first contains","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225325,"byte_end":225397,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/ `amount` elements randomly permuted. The second has the remaining","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225402,"byte_end":225471,"line_start":250,"line_end":250,"column_start":5,"column_end":74}},{"value":"/ elements that are not fully shuffled.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225476,"byte_end":225517,"line_start":251,"line_end":251,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225522,"byte_end":225525,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This is an efficient method to select `amount` elements at random from","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225530,"byte_end":225604,"line_start":253,"line_end":253,"column_start":5,"column_end":79}},{"value":"/ the slice, provided the slice may be mutated.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225609,"byte_end":225658,"line_start":254,"line_end":254,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225663,"byte_end":225666,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If you only need to choose elements randomly and `amount > self.len()/2`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225671,"byte_end":225747,"line_start":256,"line_end":256,"column_start":5,"column_end":81}},{"value":"/ then you may improve performance by taking","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225752,"byte_end":225798,"line_start":257,"line_end":257,"column_start":5,"column_end":51}},{"value":"/ `amount = values.len() - amount` and using only the second slice.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225803,"byte_end":225872,"line_start":258,"line_end":258,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225877,"byte_end":225880,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If `amount` is greater than the number of elements in the slice, this","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225885,"byte_end":225958,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ will perform a full shuffle.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":225963,"byte_end":225995,"line_start":261,"line_end":261,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226000,"byte_end":226003,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ For slices, complexity is `O(m)` where `m = amount`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226008,"byte_end":226064,"line_start":263,"line_end":263,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":1017},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226757,"byte_end":226771,"line_start":288,"line_end":288,"column_start":11,"column_end":25},"name":"IteratorRandom","qualname":"::seq::IteratorRandom","value":"IteratorRandom: Iterator + Sized","parent":null,"children":[{"krate":0,"index":1018},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1025}],"decl_id":null,"docs":" Extension trait on iterators, providing random sampling methods.","sig":null,"attributes":[{"value":"/ Extension trait on iterators, providing random sampling methods.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226217,"byte_end":226285,"line_start":270,"line_end":270,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226286,"byte_end":226289,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented on all iterators `I` where `I: Iterator + Sized`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226290,"byte_end":226368,"line_start":272,"line_end":272,"column_start":1,"column_end":79}},{"value":"/ and provides methods for","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226369,"byte_end":226397,"line_start":273,"line_end":273,"column_start":1,"column_end":29}},{"value":"/ choosing one or more elements. You must `use` this trait:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226398,"byte_end":226459,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226460,"byte_end":226463,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226464,"byte_end":226471,"line_start":276,"line_end":276,"column_start":1,"column_end":8}},{"value":"/ use rand::seq::IteratorRandom;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226472,"byte_end":226506,"line_start":277,"line_end":277,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226507,"byte_end":226510,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226511,"byte_end":226548,"line_start":279,"line_end":279,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226549,"byte_end":226552,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ let faces = \"😀😎😐😕😠😢\";","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226553,"byte_end":226596,"line_start":281,"line_end":281,"column_start":1,"column_end":26}},{"value":"/ println!(\"I am {}!\", faces.chars().choose(&mut rng).unwrap());","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226597,"byte_end":226663,"line_start":282,"line_end":282,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226664,"byte_end":226671,"line_start":283,"line_end":283,"column_start":1,"column_end":8}},{"value":"/ Example output (non-deterministic):","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226672,"byte_end":226711,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ ```none","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226712,"byte_end":226723,"line_start":285,"line_end":285,"column_start":1,"column_end":12}},{"value":"/ I am 😀!","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226724,"byte_end":226738,"line_start":286,"line_end":286,"column_start":1,"column_end":12}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226739,"byte_end":226746,"line_start":287,"line_end":287,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227683,"byte_end":227689,"line_start":304,"line_end":304,"column_start":8,"column_end":14},"name":"choose","qualname":"::seq::IteratorRandom::choose","value":"pub fn choose<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where R: Rng","parent":{"krate":0,"index":1017},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226796,"byte_end":226847,"line_start":289,"line_end":289,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226852,"byte_end":226855,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226860,"byte_end":226916,"line_start":291,"line_end":291,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226921,"byte_end":226924,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ This method uses [`Iterator::size_hint`] for optimisation. With an","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226929,"byte_end":226999,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ accurate hint and where [`Iterator::nth`] is a constant-time operation","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227004,"byte_end":227078,"line_start":294,"line_end":294,"column_start":5,"column_end":79}},{"value":"/ this method can offer `O(1)` performance. Where no size hint is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227083,"byte_end":227150,"line_start":295,"line_end":295,"column_start":5,"column_end":72}},{"value":"/ available, complexity is `O(n)` where `n` is the iterator length.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227155,"byte_end":227224,"line_start":296,"line_end":296,"column_start":5,"column_end":74}},{"value":"/ Partial hints (where `lower > 0`) also improve performance.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227229,"byte_end":227292,"line_start":297,"line_end":297,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227297,"byte_end":227300,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the output values and the number of RNG samples used","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227305,"byte_end":227371,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ depends on size hints. In particular, `Iterator` combinators that don't","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227376,"byte_end":227451,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ change the values yielded but change the size hints may result in","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227456,"byte_end":227525,"line_start":301,"line_end":301,"column_start":5,"column_end":74}},{"value":"/ `choose` returning different elements. If you want consistent results","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227530,"byte_end":227603,"line_start":302,"line_end":302,"column_start":5,"column_end":78}},{"value":"/ and RNG usage consider using [`IteratorRandom::choose_stable`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":227608,"byte_end":227675,"line_start":303,"line_end":303,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":230318,"byte_end":230331,"line_start":373,"line_end":373,"column_start":8,"column_end":21},"name":"choose_stable","qualname":"::seq::IteratorRandom::choose_stable","value":"pub fn choose_stable<R: ?Sized>(Self, &mut R) -> Option<Self::Item> where\nR: Rng","parent":{"krate":0,"index":1017},"children":[],"decl_id":null,"docs":" Choose one element at random from the iterator.","sig":null,"attributes":[{"value":"/ Choose one element at random from the iterator.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229285,"byte_end":229336,"line_start":355,"line_end":355,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229341,"byte_end":229344,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if and only if the iterator is empty.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229349,"byte_end":229405,"line_start":357,"line_end":357,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229410,"byte_end":229413,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ This method is very similar to [`choose`] except that the result","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229418,"byte_end":229486,"line_start":359,"line_end":359,"column_start":5,"column_end":73}},{"value":"/ only depends on the length of the iterator and the values produced by","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229491,"byte_end":229564,"line_start":360,"line_end":360,"column_start":5,"column_end":78}},{"value":"/ `rng`. Notably for any iterator of a given length this will make the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229569,"byte_end":229641,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/ same requests to `rng` and if the same sequence of values are produced","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229646,"byte_end":229720,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ the same index will be selected from `self`. This may be useful if you","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229725,"byte_end":229799,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ need consistent results no matter what type of iterator you are working","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229804,"byte_end":229879,"line_start":364,"line_end":364,"column_start":5,"column_end":80}},{"value":"/ with. If you do not need this stability prefer [`choose`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229884,"byte_end":229946,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229951,"byte_end":229954,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ Note that this method still uses [`Iterator::size_hint`] to skip","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":229959,"byte_end":230027,"line_start":367,"line_end":367,"column_start":5,"column_end":73}},{"value":"/ constructing elements where possible, however the selection and `rng`","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":230032,"byte_end":230105,"line_start":368,"line_end":368,"column_start":5,"column_end":78}},{"value":"/ calls are the same in the face of this optimization. If you want to","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":230110,"byte_end":230181,"line_start":369,"line_end":369,"column_start":5,"column_end":76}},{"value":"/ force every element to be created regardless call `.inspect(|e| ())`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":230186,"byte_end":230259,"line_start":370,"line_end":370,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":230264,"byte_end":230267,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`choose`]: IteratorRandom::choose","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":230272,"byte_end":230310,"line_start":372,"line_end":372,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1023},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":232280,"byte_end":232300,"line_start":426,"line_end":426,"column_start":8,"column_end":28},"name":"choose_multiple_fill","qualname":"::seq::IteratorRandom::choose_multiple_fill","value":"pub fn choose_multiple_fill<R: ?Sized>(Self, &mut R, &mut [Self::Item])\n-> usize where R: Rng","parent":{"krate":0,"index":1017},"children":[],"decl_id":null,"docs":" Collects values at random from the iterator into a supplied buffer\n until that buffer is filled.","sig":null,"attributes":[{"value":"/ Collects values at random from the iterator into a supplied buffer","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231593,"byte_end":231663,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ until that buffer is filled.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231668,"byte_end":231700,"line_start":414,"line_end":414,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231705,"byte_end":231708,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231713,"byte_end":231786,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231791,"byte_end":231863,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231868,"byte_end":231900,"line_start":418,"line_end":418,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231905,"byte_end":231908,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns the number of elements added to the buffer. This equals the length","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231913,"byte_end":231991,"line_start":420,"line_end":420,"column_start":5,"column_end":83}},{"value":"/ of the buffer unless the iterator contains insufficient elements, in which","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":231996,"byte_end":232074,"line_start":421,"line_end":421,"column_start":5,"column_end":83}},{"value":"/ case this equals the number of elements available.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":232079,"byte_end":232133,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":232138,"byte_end":232141,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":232146,"byte_end":232211,"line_start":424,"line_end":424,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":232216,"byte_end":232272,"line_start":425,"line_end":425,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233766,"byte_end":233781,"line_start":466,"line_end":466,"column_start":8,"column_end":23},"name":"choose_multiple","qualname":"::seq::IteratorRandom::choose_multiple","value":"pub fn choose_multiple<R: ?Sized>(Self, &mut R, usize) -> Vec<Self::Item>\nwhere R: Rng","parent":{"krate":0,"index":1017},"children":[],"decl_id":null,"docs":" Collects `amount` values at random from the iterator into a vector.","sig":null,"attributes":[{"value":"/ Collects `amount` values at random from the iterator into a vector.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":232983,"byte_end":233054,"line_start":450,"line_end":450,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233059,"byte_end":233062,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to `choose_multiple_fill` except for the result type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233067,"byte_end":233143,"line_start":452,"line_end":452,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233148,"byte_end":233151,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Although the elements are selected randomly, the order of elements in","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233156,"byte_end":233229,"line_start":454,"line_end":454,"column_start":5,"column_end":78}},{"value":"/ the buffer is neither stable nor fully random. If random ordering is","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233234,"byte_end":233306,"line_start":455,"line_end":455,"column_start":5,"column_end":77}},{"value":"/ desired, shuffle the result.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233311,"byte_end":233343,"line_start":456,"line_end":456,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233348,"byte_end":233351,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ The length of the returned vector equals `amount` unless the iterator","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233356,"byte_end":233429,"line_start":458,"line_end":458,"column_start":5,"column_end":78}},{"value":"/ contains insufficient elements, in which case it equals the number of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233434,"byte_end":233507,"line_start":459,"line_end":459,"column_start":5,"column_end":78}},{"value":"/ elements available.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233512,"byte_end":233535,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233540,"byte_end":233543,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ Complexity is `O(n)` where `n` is the length of the iterator.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233548,"byte_end":233613,"line_start":462,"line_end":462,"column_start":5,"column_end":70}},{"value":"/ For slices, prefer [`SliceRandom::choose_multiple`].","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233618,"byte_end":233674,"line_start":463,"line_end":463,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":233679,"byte_end":233704,"line_start":464,"line_end":464,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2406},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238805,"byte_end":238820,"line_start":625,"line_end":625,"column_start":12,"column_end":27},"name":"SliceChooseIter","qualname":"::seq::SliceChooseIter","value":"SliceChooseIter {  }","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412}],"decl_id":null,"docs":" An iterator over multiple slice elements.","sig":null,"attributes":[{"value":"/ An iterator over multiple slice elements.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238534,"byte_end":238579,"line_start":618,"line_end":618,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238580,"byte_end":238583,"line_start":619,"line_end":619,"column_start":1,"column_end":4}},{"value":"/ This struct is created by","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238584,"byte_end":238613,"line_start":620,"line_end":620,"column_start":1,"column_end":30}},{"value":"/ [`SliceRandom::choose_multiple`](trait.SliceRandom.html#tymethod.choose_multiple).","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238614,"byte_end":238700,"line_start":621,"line_end":621,"column_start":1,"column_end":87}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238701,"byte_end":238726,"line_start":622,"line_end":622,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1105},"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5795,"byte_end":5801,"line_start":184,"line_end":184,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"pub fn random<T>() -> T where Standard: Distribution<T>","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3236,"byte_end":3312,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3313,"byte_end":3316,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This is simply a shortcut for `thread_rng().gen()`. See [`thread_rng`] for","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3317,"byte_end":3395,"line_start":114,"line_end":114,"column_start":1,"column_end":79}},{"value":"/ documentation of the entropy source and [`Standard`] for documentation of","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3396,"byte_end":3473,"line_start":115,"line_end":115,"column_start":1,"column_end":78}},{"value":"/ distributions and type-specific generation.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3474,"byte_end":3521,"line_start":116,"line_end":116,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3522,"byte_end":3525,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Provided implementations","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3526,"byte_end":3556,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3557,"byte_end":3560,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ The following types have provided implementations that","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3561,"byte_end":3619,"line_start":120,"line_end":120,"column_start":1,"column_end":59}},{"value":"/ generate values with the following ranges and distributions:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3620,"byte_end":3684,"line_start":121,"line_end":121,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3685,"byte_end":3688,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ * Integers (`i32`, `u32`, `isize`, `usize`, etc.): Uniformly distributed","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3689,"byte_end":3765,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/   over all values of the type.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3766,"byte_end":3800,"line_start":124,"line_end":124,"column_start":1,"column_end":35}},{"value":"/ * `char`: Uniformly distributed over all Unicode scalar values, i.e. all","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3801,"byte_end":3877,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/   code points in the range `0...0x10_FFFF`, except for the range","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3878,"byte_end":3946,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/   `0xD800...0xDFFF` (the surrogate code points). This includes","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":3947,"byte_end":4013,"line_start":127,"line_end":127,"column_start":1,"column_end":67}},{"value":"/   unassigned/reserved code points.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4014,"byte_end":4052,"line_start":128,"line_end":128,"column_start":1,"column_end":39}},{"value":"/ * `bool`: Generates `false` or `true`, each with probability 0.5.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4053,"byte_end":4122,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/ * Floating point types (`f32` and `f64`): Uniformly distributed in the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4123,"byte_end":4197,"line_start":130,"line_end":130,"column_start":1,"column_end":75}},{"value":"/   half-open range `[0, 1)`. See notes below.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4198,"byte_end":4246,"line_start":131,"line_end":131,"column_start":1,"column_end":49}},{"value":"/ * Wrapping integers (`Wrapping<T>`), besides the type identical to their","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4247,"byte_end":4323,"line_start":132,"line_end":132,"column_start":1,"column_end":77}},{"value":"/   normal integer variants.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4324,"byte_end":4354,"line_start":133,"line_end":133,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4355,"byte_end":4358,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Also supported is the generation of the following","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4359,"byte_end":4412,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/ compound types where all component types are supported:","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4413,"byte_end":4472,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4473,"byte_end":4476,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ *   Tuples (up to 12 elements): each element is generated sequentially.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4477,"byte_end":4552,"line_start":138,"line_end":138,"column_start":1,"column_end":76}},{"value":"/ *   Arrays (up to 32 elements): each element is generated sequentially;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4553,"byte_end":4628,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/     see also [`Rng::fill`] which supports arbitrary array length for integer","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4629,"byte_end":4709,"line_start":140,"line_end":140,"column_start":1,"column_end":81}},{"value":"/     types and tends to be faster for `u32` and smaller types.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4710,"byte_end":4775,"line_start":141,"line_end":141,"column_start":1,"column_end":66}},{"value":"/ *   `Option<T>` first generates a `bool`, and if true generates and returns","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4776,"byte_end":4855,"line_start":142,"line_end":142,"column_start":1,"column_end":80}},{"value":"/     `Some(value)` where `value: T`, otherwise returning `None`.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4856,"byte_end":4923,"line_start":143,"line_end":143,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4924,"byte_end":4927,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4928,"byte_end":4942,"line_start":145,"line_end":145,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4943,"byte_end":4946,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4947,"byte_end":4954,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4955,"byte_end":4988,"line_start":148,"line_end":148,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":4989,"byte_end":5011,"line_start":149,"line_end":149,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5012,"byte_end":5015,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5016,"byte_end":5050,"line_start":151,"line_end":151,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5051,"byte_end":5073,"line_start":152,"line_end":152,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5074,"byte_end":5077,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5078,"byte_end":5124,"line_start":154,"line_end":154,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5125,"byte_end":5169,"line_start":155,"line_end":155,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5170,"byte_end":5175,"line_start":156,"line_end":156,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5176,"byte_end":5183,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5184,"byte_end":5187,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ If you're calling `random()` in a loop, caching the generator as in the","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5188,"byte_end":5263,"line_start":159,"line_end":159,"column_start":1,"column_end":76}},{"value":"/ following example can increase performance.","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5264,"byte_end":5311,"line_start":160,"line_end":160,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5312,"byte_end":5315,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5316,"byte_end":5323,"line_start":162,"line_end":162,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5324,"byte_end":5342,"line_start":163,"line_end":163,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5343,"byte_end":5346,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5347,"byte_end":5377,"line_start":165,"line_end":165,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5378,"byte_end":5381,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5382,"byte_end":5409,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5410,"byte_end":5437,"line_start":168,"line_end":168,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5438,"byte_end":5443,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5444,"byte_end":5447,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ // can be made faster by caching thread_rng","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5448,"byte_end":5495,"line_start":171,"line_end":171,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5496,"byte_end":5499,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5500,"byte_end":5537,"line_start":173,"line_end":173,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5538,"byte_end":5541,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5542,"byte_end":5569,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5570,"byte_end":5593,"line_start":176,"line_end":176,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5594,"byte_end":5599,"line_start":177,"line_end":177,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5600,"byte_end":5607,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5608,"byte_end":5611,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ [`Standard`]: distributions::Standard","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5612,"byte_end":5653,"line_start":180,"line_end":180,"column_start":1,"column_end":42}},{"value":"cfg(all(feature = \"std\", feature = \"std_rng\"))","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5654,"byte_end":5703,"line_start":181,"line_end":181,"column_start":1,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":5778,"byte_end":5787,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18465,"byte_end":18479,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18750,"byte_end":18764,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18774,"byte_end":18783,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":20666,"byte_end":20675,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27743,"byte_end":27751,"line_start":135,"line_end":135,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28319,"byte_end":28327,"line_start":155,"line_end":155,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28928,"byte_end":28935,"line_start":182,"line_end":182,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45039,"byte_end":45047,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45188,"byte_end":45196,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45339,"byte_end":45347,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45483,"byte_end":45491,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45628,"byte_end":45636,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45931,"byte_end":45939,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":55359,"byte_end":55367,"line_start":71,"line_end":71,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":56269,"byte_end":56277,"line_start":95,"line_end":95,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":56742,"byte_end":56754,"line_start":105,"line_end":105,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":57541,"byte_end":57553,"line_start":125,"line_end":125,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":57809,"byte_end":57817,"line_start":134,"line_end":134,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":58998,"byte_end":59006,"line_start":169,"line_end":169,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":60889,"byte_end":60897,"line_start":230,"line_end":230,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":61241,"byte_end":61249,"line_start":244,"line_end":244,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67028,"byte_end":67033,"line_start":70,"line_end":70,"column_start":13,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67457,"byte_end":67462,"line_start":84,"line_end":84,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":68180,"byte_end":68190,"line_start":107,"line_end":107,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":68444,"byte_end":68454,"line_start":117,"line_end":117,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85582,"byte_end":85595,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":90489,"byte_end":90502,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":319}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97673,"byte_end":97686,"line_start":442,"line_end":442,"column_start":28,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97713,"byte_end":97726,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105371,"byte_end":105378,"line_start":179,"line_end":179,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":371},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106144,"byte_end":106151,"line_start":201,"line_end":201,"column_start":44,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":379}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110052,"byte_end":110059,"line_start":302,"line_end":302,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110216,"byte_end":110223,"line_start":308,"line_end":308,"column_start":52,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110797,"byte_end":110805,"line_start":326,"line_end":326,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111536,"byte_end":111541,"line_start":355,"line_end":355,"column_start":56,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":426}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111841,"byte_end":111855,"line_start":367,"line_end":367,"column_start":56,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126869,"byte_end":126880,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138769,"byte_end":138777,"line_start":1044,"line_end":1044,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":450}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138843,"byte_end":138858,"line_start":1048,"line_end":1048,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161984,"byte_end":161997,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173777,"byte_end":173778,"line_start":305,"line_end":305,"column_start":35,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190601,"byte_end":190608,"line_start":43,"line_end":43,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190762,"byte_end":190769,"line_start":50,"line_end":50,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191662,"byte_end":191671,"line_start":84,"line_end":84,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191812,"byte_end":191821,"line_start":90,"line_end":90,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196702,"byte_end":196714,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":197541,"byte_end":197553,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":198092,"byte_end":198104,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":198431,"byte_end":198443,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":198733,"byte_end":198746,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":199589,"byte_end":199602,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":719},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":726}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":202178,"byte_end":202191,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":202630,"byte_end":202643,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206616,"byte_end":206623,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206919,"byte_end":206926,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209308,"byte_end":209314,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209770,"byte_end":209776,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":210085,"byte_end":210091,"line_start":72,"line_end":72,"column_start":20,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214762,"byte_end":214771,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214869,"byte_end":214878,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":215963,"byte_end":215972,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263826,"byte_end":263834,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":265254,"byte_end":265262,"line_start":90,"line_end":90,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":265671,"byte_end":265679,"line_start":104,"line_end":104,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266269,"byte_end":266277,"line_start":120,"line_end":120,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266389,"byte_end":266397,"line_start":127,"line_end":127,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266698,"byte_end":266710,"line_start":143,"line_end":143,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267245,"byte_end":267257,"line_start":164,"line_end":164,"column_start":32,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267481,"byte_end":267497,"line_start":175,"line_end":175,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268022,"byte_end":268038,"line_start":197,"line_end":197,"column_start":28,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273067,"byte_end":273074,"line_start":331,"line_end":331,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273238,"byte_end":273245,"line_start":336,"line_end":336,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273518,"byte_end":273525,"line_start":343,"line_end":343,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273645,"byte_end":273652,"line_start":348,"line_end":348,"column_start":20,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238501,"byte_end":238502,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":239053,"byte_end":239068,"line_start":632,"line_end":632,"column_start":73,"column_end":88},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1080}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":239520,"byte_end":239535,"line_start":647,"line_end":647,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2928,"byte_end":2941,"line_start":98,"line_end":98,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":24}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11349,"byte_end":11356,"line_start":110,"line_end":110,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":332}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\mod.rs","byte_start":11557,"byte_end":11565,"line_start":117,"line_end":117,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":462}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2951,"byte_end":2958,"line_start":99,"line_end":99,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":531}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2977,"byte_end":2981,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":633}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187897,"byte_end":187904,"line_start":100,"line_end":100,"column_start":33,"column_end":40},"ref_id":{"krate":0,"index":634}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mod.rs","byte_start":187915,"byte_end":187919,"line_start":102,"line_end":102,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":747}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\lib.rs","byte_start":2991,"byte_end":2994,"line_start":102,"line_end":102,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":848}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":217214,"byte_end":217219,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":849}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18465,"byte_end":18479,"line_start":75,"line_end":75,"column_start":23,"column_end":37},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1114},"to":{"krate":1,"index":8819}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18750,"byte_end":18764,"line_start":84,"line_end":84,"column_start":30,"column_end":44},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1114},"to":{"krate":4,"index":2326}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":18774,"byte_end":18783,"line_start":86,"line_end":86,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\bernoulli.rs","byte_start":20666,"byte_end":20675,"line_start":131,"line_end":131,"column_start":29,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1107},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":27743,"byte_end":27751,"line_start":135,"line_end":135,"column_start":28,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1128},"to":{"krate":1,"index":7240}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28319,"byte_end":28327,"line_start":155,"line_end":155,"column_start":39,"column_end":47},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1128},"to":{"krate":1,"index":7511}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\distribution.rs","byte_start":28928,"byte_end":28935,"line_start":182,"line_end":182,"column_start":38,"column_end":45},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1140},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45039,"byte_end":45047,"line_start":21,"line_end":21,"column_start":27,"column_end":35},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45188,"byte_end":45196,"line_start":28,"line_end":28,"column_start":28,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45339,"byte_end":45347,"line_start":35,"line_end":35,"column_start":28,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45483,"byte_end":45491,"line_start":42,"line_end":42,"column_start":28,"column_end":36},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45628,"byte_end":45636,"line_start":49,"line_end":49,"column_start":29,"column_end":37},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\integer.rs","byte_start":45931,"byte_end":45939,"line_start":59,"line_end":59,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":55359,"byte_end":55367,"line_start":71,"line_end":71,"column_start":29,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":56269,"byte_end":56277,"line_start":95,"line_end":95,"column_start":21,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":93}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":56742,"byte_end":56754,"line_start":105,"line_end":105,"column_start":27,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1234},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":57541,"byte_end":57553,"line_start":125,"line_end":125,"column_start":21,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1234},"to":{"krate":0,"index":93}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":57809,"byte_end":57817,"line_start":134,"line_end":134,"column_start":29,"column_end":37},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":58998,"byte_end":59006,"line_start":169,"line_end":169,"column_start":27,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":60889,"byte_end":60897,"line_start":230,"line_end":230,"column_start":37,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\other.rs","byte_start":61241,"byte_end":61249,"line_start":244,"line_end":244,"column_start":39,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2017},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67028,"byte_end":67033,"line_start":70,"line_end":70,"column_start":13,"column_end":18},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1553},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":67457,"byte_end":67462,"line_start":84,"line_end":84,"column_start":37,"column_end":42},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1553},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":68180,"byte_end":68190,"line_start":107,"line_end":107,"column_start":29,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1569},"to":{"krate":1,"index":8819}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\slice.rs","byte_start":68444,"byte_end":68454,"line_start":117,"line_end":117,"column_start":28,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1569},"to":{"krate":4,"index":2326}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\utils.rs","byte_start":76660,"byte_end":76665,"line_start":238,"line_end":238,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":265}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\utils.rs","byte_start":76871,"byte_end":76876,"line_start":245,"line_end":245,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":269}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\utils.rs","byte_start":77321,"byte_end":77326,"line_start":266,"line_end":266,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":274}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":85582,"byte_end":85595,"line_start":87,"line_end":87,"column_start":37,"column_end":50},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1627},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":90489,"byte_end":90502,"line_start":223,"line_end":223,"column_start":33,"column_end":46},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1627},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97673,"byte_end":97686,"line_start":442,"line_end":442,"column_start":28,"column_end":41},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1638},"to":{"krate":4,"index":2326}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted_index.rs","byte_start":97713,"byte_end":97726,"line_start":444,"line_end":444,"column_start":23,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1638},"to":{"krate":1,"index":8819}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":105371,"byte_end":105378,"line_start":179,"line_end":179,"column_start":24,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106144,"byte_end":106151,"line_start":201,"line_end":201,"column_start":44,"column_end":51},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1658},"to":{"krate":0,"index":60}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":106567,"byte_end":106572,"line_start":214,"line_end":214,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":381}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":107147,"byte_end":107152,"line_start":229,"line_end":229,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":383}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110052,"byte_end":110059,"line_start":302,"line_end":302,"column_start":43,"column_end":50},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1658},"to":{"krate":1,"index":2738}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110216,"byte_end":110223,"line_start":308,"line_end":308,"column_start":52,"column_end":59},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1658},"to":{"krate":1,"index":2738}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":110797,"byte_end":110805,"line_start":326,"line_end":326,"column_start":43,"column_end":51},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":411},"to":{"krate":0,"index":407}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111536,"byte_end":111541,"line_start":355,"line_end":355,"column_start":56,"column_end":61},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":38311},"to":{"krate":0,"index":417}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":111841,"byte_end":111855,"line_start":367,"line_end":367,"column_start":56,"column_end":70},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":38380},"to":{"krate":0,"index":417}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":126869,"byte_end":126880,"line_start":747,"line_end":747,"column_start":25,"column_end":36},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1923},"to":{"krate":0,"index":383}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138769,"byte_end":138777,"line_start":1044,"line_end":1044,"column_start":24,"column_end":32},"kind":{"Impl":{"id":58}},"from":{"krate":1,"index":42251},"to":{"krate":0,"index":381}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\uniform.rs","byte_start":138843,"byte_end":138858,"line_start":1048,"line_end":1048,"column_start":25,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1974},"to":{"krate":0,"index":383}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\distributions\\weighted.rs","byte_start":161984,"byte_end":161997,"line_start":29,"line_end":29,"column_start":21,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1997},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":165940,"byte_end":165947,"line_start":55,"line_end":55,"column_start":16,"column_end":23},"kind":"SuperTrait","from":{"krate":14,"index":188},"to":{"krate":0,"index":603}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rng.rs","byte_start":173777,"byte_end":173778,"line_start":305,"line_end":305,"column_start":35,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":623},"to":{"krate":0,"index":603}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190601,"byte_end":190608,"line_start":43,"line_end":43,"column_start":15,"column_end":22},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":190762,"byte_end":190769,"line_start":50,"line_end":50,"column_start":27,"column_end":34},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2302},"to":{"krate":14,"index":188}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191662,"byte_end":191671,"line_start":84,"line_end":84,"column_start":23,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2308},"to":{"krate":1,"index":8819}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\read.rs","byte_start":191812,"byte_end":191821,"line_start":90,"line_end":90,"column_start":28,"column_end":37},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2308},"to":{"krate":4,"index":2326}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":196702,"byte_end":196714,"line_start":84,"line_end":84,"column_start":15,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":197541,"byte_end":197553,"line_start":107,"line_end":107,"column_start":36,"column_end":48},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2313},"to":{"krate":14,"index":188}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":198092,"byte_end":198104,"line_start":131,"line_end":131,"column_start":25,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2313},"to":{"krate":1,"index":2457}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":198431,"byte_end":198443,"line_start":143,"line_end":143,"column_start":29,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2313},"to":{"krate":14,"index":193}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":198733,"byte_end":198746,"line_start":159,"line_end":159,"column_start":32,"column_end":45},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2322},"to":{"krate":14,"index":48}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":199589,"byte_end":199602,"line_start":181,"line_end":181,"column_start":15,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":202178,"byte_end":202191,"line_start":258,"line_end":258,"column_start":25,"column_end":38},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2322},"to":{"krate":1,"index":2457}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\adapter\\reseeding.rs","byte_start":202630,"byte_end":202643,"line_start":274,"line_end":274,"column_start":29,"column_end":42},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2322},"to":{"krate":14,"index":193}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206616,"byte_end":206623,"line_start":37,"line_end":37,"column_start":6,"column_end":13},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\mock.rs","byte_start":206919,"byte_end":206926,"line_start":48,"line_end":48,"column_start":18,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2334},"to":{"krate":14,"index":188}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209308,"byte_end":209314,"line_start":36,"line_end":36,"column_start":18,"column_end":24},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2348},"to":{"krate":14,"index":188}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":209770,"byte_end":209776,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2348},"to":{"krate":14,"index":194}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\std.rs","byte_start":210085,"byte_end":210091,"line_start":72,"line_end":72,"column_start":20,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2348},"to":{"krate":14,"index":193}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214762,"byte_end":214771,"line_start":92,"line_end":92,"column_start":18,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2362},"to":{"krate":1,"index":2810}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":214869,"byte_end":214878,"line_start":98,"line_end":98,"column_start":18,"column_end":27},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2362},"to":{"krate":14,"index":188}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\rngs\\thread.rs","byte_start":215963,"byte_end":215972,"line_start":130,"line_end":130,"column_start":20,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2362},"to":{"krate":14,"index":193}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":263826,"byte_end":263834,"line_start":40,"line_end":40,"column_start":6,"column_end":14},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":265254,"byte_end":265262,"line_start":90,"line_end":90,"column_start":23,"column_end":31},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2373},"to":{"krate":1,"index":7077}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":265671,"byte_end":265679,"line_start":104,"line_end":104,"column_start":20,"column_end":28},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2373},"to":{"krate":1,"index":2487}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266269,"byte_end":266277,"line_start":120,"line_end":120,"column_start":25,"column_end":33},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2373},"to":{"krate":1,"index":2738}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266389,"byte_end":266397,"line_start":127,"line_end":127,"column_start":27,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2373},"to":{"krate":1,"index":2738}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":266698,"byte_end":266710,"line_start":143,"line_end":143,"column_start":23,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2384},"to":{"krate":1,"index":7240}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267245,"byte_end":267257,"line_start":164,"line_end":164,"column_start":32,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2384},"to":{"krate":1,"index":7129}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":267481,"byte_end":267497,"line_start":175,"line_end":175,"column_start":19,"column_end":35},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2395},"to":{"krate":1,"index":7240}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":268022,"byte_end":268038,"line_start":197,"line_end":197,"column_start":28,"column_end":44},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2395},"to":{"krate":1,"index":7129}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273067,"byte_end":273074,"line_start":331,"line_end":331,"column_start":28,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2530}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273238,"byte_end":273245,"line_start":336,"line_end":336,"column_start":21,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2519}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273518,"byte_end":273525,"line_start":343,"line_end":343,"column_start":27,"column_end":34},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2487}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":273645,"byte_end":273652,"line_start":348,"line_end":348,"column_start":20,"column_end":27},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":932},"to":{"krate":1,"index":2492}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278251,"byte_end":278255,"line_start":473,"line_end":473,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2842},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278258,"byte_end":278268,"line_start":473,"line_end":473,"column_start":20,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":2530},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278271,"byte_end":278274,"line_start":473,"line_end":473,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2519},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278277,"byte_end":278286,"line_start":473,"line_end":473,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2487},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278289,"byte_end":278291,"line_start":473,"line_end":473,"column_start":51,"column_end":53},"kind":"SuperTrait","from":{"krate":1,"index":2492},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278294,"byte_end":278307,"line_start":473,"line_end":473,"column_start":56,"column_end":69},"kind":"SuperTrait","from":{"krate":0,"index":381},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278326,"byte_end":278330,"line_start":474,"line_end":474,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":9018},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\index.rs","byte_start":278344,"byte_end":278353,"line_start":474,"line_end":474,"column_start":37,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2930},"to":{"krate":0,"index":955}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226773,"byte_end":226781,"line_start":288,"line_end":288,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":7240},"to":{"krate":0,"index":1017}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":226784,"byte_end":226789,"line_start":288,"line_end":288,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":1017}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":238501,"byte_end":238502,"line_start":615,"line_end":615,"column_start":28,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1072},"to":{"krate":0,"index":1017}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":239053,"byte_end":239068,"line_start":632,"line_end":632,"column_start":73,"column_end":88},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2406},"to":{"krate":1,"index":7240}},{"span":{"file_name":"C:\\Users\\Android\\.cargo\\git\\checkouts\\rand-02690058d91f0548\\81b8a75\\src\\seq\\mod.rs","byte_start":239520,"byte_end":239535,"line_start":647,"line_end":647,"column_start":9,"column_end":24},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2406},"to":{"krate":1,"index":7129}}]}